<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笨小孩杂谈</title>
  
  <subtitle>work hard,play hard</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-05-04T10:15:35.470Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rocky-191</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《微信背后的产品观》-读书分享</title>
    <link href="http://yoursite.com/2023/05/04/readBookOfWeixin/"/>
    <id>http://yoursite.com/2023/05/04/readBookOfWeixin/</id>
    <published>2023-05-04T09:40:48.000Z</published>
    <updated>2023-05-04T10:15:35.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/04/readBookOfWeixin/weixin.png" alt="weixin"></p><p>最近又重新刷了一遍《微信背后的产品观》，遂有了如下的一些感想，就权当记录一下吧！部分内容是书中摘抄，建议有机会可以看看原书！</p><h2 id="作者及内容简介"><a href="#作者及内容简介" class="headerlink" title="作者及内容简介"></a>作者及内容简介</h2><p>张小龙的三个产品：foxmail、qq邮箱、微信<br>本书的内容是张小龙在2012年一个内部公开演讲内容，整理成书。内容分为了用户篇、需求篇、设计篇、气质篇、UI篇和提问环节。包含了作者对产品和世界的底层运行逻辑的理解，对群体、规则、趋势的看法和态度。<br>分享前的思考</p><ol><li>为什么微信没有做信息已读的功能？</li><li>为什么微信启动图片是一个人在月球看地球的图片？</li><li>为什么微信要做漂流瓶的功能？</li><li>为什么微信要做朋友圈？</li></ol><h2 id="用户篇"><a href="#用户篇" class="headerlink" title="用户篇"></a>用户篇</h2><p>人是懒惰的。懒惰也催生了很多发明，问题是我们的产品里如何应用这个观点，做出适当的功能特性。（可以试试微信的语音播放功能）<br>人是没有耐心的。用户不会去看产品说明书，买回来一件商品，说明书立马就会被扔到一旁。如果不能让用户一分钟就爱上你的产品，以后可能就不会再来用了。从性能方面看就如同用户在几秒钟内打不开网站、白屏时间过长，用户就会离开一样，就会造成用户流失。<br>产品设计过程中要考虑人性化，人性化就是以己推人。产品设计出来终究是给人用的，所以要去研究人，就要学会以己推人。假设自己就是用户，自己都很懒，不喜欢看说明书，不喜欢复杂冗余的功能体验，通过自己，或许就理解了人们最普遍的心理。所以，在产品设计里，我们往往是靠着自己的感觉来做决定的。<br>从日常体验中发现本质。要有意识的在生活中去发现产品设计背后的一些思想，使用一个功能的时候，去思考为什么要如此设计，有没有更好的设计方式，在不断的体验过程中去感受产品功能设计。假如一个功能做出来，自己都不想使用，那这个功能设计就是失败的。</p><h2 id="需求篇"><a href="#需求篇" class="headerlink" title="需求篇"></a>需求篇</h2><p>不要用户说什么就去做什么。用户的反馈只是帮助你了解到他们的想法，而用户的需求是零散的，解决方案是归纳抽象的过程。我们要做的是透过用户的想法，了解背后用户真正的诉求点，即找到需求背后的本质需求。<br>做产品应该首先去考虑的是：我们不是在做一个功能，而是要怎么满足用户的诉求，最终的落脚点还是用户，是使用产品的人。</p><h2 id="设计篇"><a href="#设计篇" class="headerlink" title="设计篇"></a>设计篇</h2><p>先做产品结构，之后才是功能细节。不必一开始就追求大而全，做好主体结构之后在不断迭代完善细节。<br>设计、分类，归纳总结。抽象方能化繁为简。如果我们有100个需求，我们可以将其变成10个需求，从而派生出100个需求，就做了一个很好的抽象，如果能汇总成一个需求就更好了，找到不同需求之间的共性，进行处理。这样程序员才不会被累死！！！越简单的分类越容易被接受。保持简单。<br>把用户体验做到极致就是创新。例如：把手机放到耳朵旁边，微信语音的声音会切换到从听筒出来。<br>不要过度设计，不要过度设计，不要过度设计，重要的事情说三遍，设计是为了更好的体验。需要用文字解释的功能不是好体验。</p><p>最后谈谈朋友圈。站在今天看朋友圈的设计，大家可能觉得很简单，人们发发文字、晒晒图片，然后朋友点赞评论，so easy。你有没有一种感觉，自己一下午就能把设计稿画出来？</p><p>朋友圈是微信4.0的一个重要功能，在书里有大量的案例是围绕着朋友圈展开的，设计之精妙，叹为观止。例如，我们刷朋友圈会有这样的感觉，划了几屏，都没看到一个评论和点赞，是大家的活跃度降低了吗？可能是，也可能不是，这就和朋友圈的产品设计逻辑有很大的关系。</p><p>大家可能因为各种各样的原因加了好多微信好友，但实际上经常联系的人也就那么几个，不会超过100，而每天都说话的可能都没有10个，剩下的人大部分都是弱关系、弱连接。假如弱关系的朋友发了一个朋友圈，他的朋友点赞或者评论，你就会看不到，而这就是朋友圈的设计规则，这一点和微博有很大的不同。</p><p>我们经常看到一个人在默默的发朋友圈，自己看着一条评论或点赞都没有，以为人家在自言自语，可能是、也可能不是，或许人家一堆评论、点赞，而你根本就看不到。即使整个朋友圈都没有点赞和评论了，甚至你自己发的东西也没有点赞和评论了，你也不必觉得尴尬，可能你并没有很多朋友，但别人也不知道。</p><p>作者认为他要做的朋友圈是私密的，可以很方便地跟好友互动，但是又觉得很舒适，没有心理上的压力。</p><h2 id="思考答案"><a href="#思考答案" class="headerlink" title="思考答案"></a>思考答案</h2><ol><li>为什么微信没有做信息已读的功能？张小龙不喜欢，觉得对自己有压力。</li><li>为什么微信启动图片是一个人在月球看地球的图片？（据说第一个版本是站在地球看月球）让人们看到了孤独感，而孤独是永恒的主题。</li><li>为什么微信要做漂流瓶的功能？是想帮人解决倾诉和好奇的欲望，其次才是交友的欲望。</li><li>为什么微信要做朋友圈？大家的内心可能缺少一些东西，这种时候就需要用另一种形式来满足自己的内心，可以是存在感，可以是自我价值认同感，人们需要在朋友的关注里存在。而手机因为随时随地的特性，便成了最好的媒介。</li></ol><p>每个人都会有自己解决问题的办法，没有永远正确的教条。—张小龙<br>我所说的，都是错的。—张小龙</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2023/05/04/readBookOfWeixin/weixin.png&quot; alt=&quot;weixin&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近又重新刷了一遍《微信背后的产品观》，遂有了如下的一些感想，就权当记录一下吧！部分内容是书中摘抄，建议有机会可以看看原书！&lt;/p
      
    
    </summary>
    
      <category term="book" scheme="http://yoursite.com/categories/book/"/>
    
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Promise链式调用特性总结</title>
    <link href="http://yoursite.com/2020/09/05/promiseArticle1/"/>
    <id>http://yoursite.com/2020/09/05/promiseArticle1/</id>
    <published>2020-09-05T03:51:45.000Z</published>
    <updated>2020-09-05T03:53:17.495Z</updated>
    
    <content type="html"><![CDATA[<p>相信各位前端小伙伴对于Promise应该很熟悉了吧，日常工作中，100%会用到的一个东西，除非你还在用callback解决异步，那我就太佩服了。话不多说，进入正题。</p><p>提前声明一下，以下代码在node环境中实现，你可以创建一个文件，使用nodemon这个工具执行这个文件，就可以进行监听更新，真香。</p><p>首先你要创建一个promise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let p=new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">  resolve(&apos;first resolve&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="方式一、通过return传递结果"><a href="#方式一、通过return传递结果" class="headerlink" title="方式一、通过return传递结果"></a>方式一、通过return传递结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制台就会输出：first resolve</p><h2 id="方式二、通过返回新的promise-resolve结果"><a href="#方式二、通过返回新的promise-resolve结果" class="headerlink" title="方式二、通过返回新的promise resolve结果"></a>方式二、通过返回新的promise resolve结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    resolve(&apos;second resolve: &apos;+res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制台就会输出：second resolve: first resolve<br>如果在返回的promise里加一个异步比如settimeout呢，结果会是什么样？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    // resolve(&apos;second resolve: &apos;+res)</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      resolve(&apos;second resolve: &apos;+res)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台等待2s后输出：second resolve: first resolve</p><h2 id="方式三、通过返回新的promise-reject-原因"><a href="#方式三、通过返回新的promise-reject-原因" class="headerlink" title="方式三、通过返回新的promise reject 原因"></a>方式三、通过返回新的promise reject 原因</h2><p>既然可以通过新的promise resolve，那么reject应该也可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      reject(&apos;error&apos;)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;error: &apos;+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台等待2s后输出：error: error</p><h2 id="方式四、then函数走了失败回调继续走then"><a href="#方式四、then函数走了失败回调继续走then" class="headerlink" title="方式四、then函数走了失败回调继续走then"></a>方式四、then函数走了失败回调继续走then</h2><p>紧接着上一步，失败后，reject出原因，继续后面then<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      reject(&apos;error&apos;)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;error: &apos;+err)</span><br><span class="line">  // 默认 return undefined</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(&apos;second then success: &apos;+res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;second then error: &apos;+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台会输出两行内容：error: error，second then success: undefined。这就表明在reject 后面继续then会执行下一步的resolve，如果上一步没有返回值，默认接收undefined。</p><h2 id="方式五、then中使用throw-new-Error情况"><a href="#方式五、then中使用throw-new-Error情况" class="headerlink" title="方式五、then中使用throw new Error情况"></a>方式五、then中使用throw new Error情况</h2><p>如果在then中抛出异常呢，如何显示？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      reject(&apos;error&apos;)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;error: &apos;+err)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  throw new Error(&apos;happend error&apos;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(&apos;third then success&apos;+res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;third then error &apos;+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台会输出：<br>error: error<br>third then error Error: happend error<br>这表明throw error抛出异常类似reject，会由下一步的then方法中的错误方法处理。</p><h2 id="方式六、在promise中使用catch进行错误捕获"><a href="#方式六、在promise中使用catch进行错误捕获" class="headerlink" title="方式六、在promise中使用catch进行错误捕获"></a>方式六、在promise中使用catch进行错误捕获</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      reject(&apos;error&apos;)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;error: &apos;+err)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  throw new Error(&apos;happend error&apos;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(&apos;third then success&apos;+res)</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">  console.log(&apos;catched &apos;+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制台会输出：<br>error: error<br>catched Error: happend error  </p><p>如果在catch方法的前面then中有对上一步错误的处理办法会怎么样呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    // resolve(&apos;second resolve: &apos;+res)</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      reject(&apos;error&apos;)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;error: &apos;+err)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  throw new Error(&apos;happend error&apos;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(&apos;third then success&apos;+res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;third then error &apos;+ err)</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">  console.log(&apos;catched &apos;+err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台会输出：<br>error: error<br>third then error Error: happend error<br>这说明catch捕获，如果catch前面有error处理函数，catch不会捕获异常的。</p><p>如果在catch后面继续then呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">p.then(res=&gt;&#123;</span><br><span class="line">  return res;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    // resolve(&apos;second resolve: &apos;+res)</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      reject(&apos;error&apos;)</span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  console.log(&apos;error: &apos;+err)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  throw new Error(&apos;happend error&apos;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(&apos;third then success&apos;+res)</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">  console.log(&apos;catched &apos;+err)</span><br><span class="line">  return &apos;catched error&apos;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">  console.log(&apos;catched then &apos;+res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>控制台会输出：<br>error: error<br>catched Error: happend error<br>catched then catched error<br>这说明catch后面是可以继续调用then的，catch 在promise的源码里面其实也是一个then，catch遵循then的运行规则。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>promise链式调用，具体是失败还是成功，取决于以下情况：</p><h3 id="成功的条件"><a href="#成功的条件" class="headerlink" title="成功的条件"></a>成功的条件</h3><ul><li>then return 一个普通的js 值</li><li>then return 一个新的promise成功态的结果 resolve处理<h3 id="失败的条件"><a href="#失败的条件" class="headerlink" title="失败的条件"></a>失败的条件</h3></li><li>then return 一个新的promise失败态的原因 error</li><li>then throw抛出异常</li></ul><p>以上就是promise链式调用的一些实践总结，复习复习基础知识。欢迎大家交流。</p><p><strong>参考资料：</strong></p><ul><li><a href="https://promisesaplus.com/" target="_blank" rel="noopener">promise+规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信各位前端小伙伴对于Promise应该很熟悉了吧，日常工作中，100%会用到的一个东西，除非你还在用callback解决异步，那我就太佩服了。话不多说，进入正题。&lt;/p&gt;
&lt;p&gt;提前声明一下，以下代码在node环境中实现，你可以创建一个文件，使用nodemon这个工具执行
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>vue+koa2搭建mock数据环境</title>
    <link href="http://yoursite.com/2020/05/17/vue-koa2-mock-demo/"/>
    <id>http://yoursite.com/2020/05/17/vue-koa2-mock-demo/</id>
    <published>2020-05-17T13:42:57.000Z</published>
    <updated>2020-05-17T13:46:34.490Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间写了一篇<a href="https://rocky-191.github.io/2020/05/05/vue-mock-demo/" target="_blank" rel="noopener">前端vue项目实现mock数据方式</a>的文章，主要是在vue项目里使用mock数据，数据和项目耦合在一起，不太优雅，作为一个有追求的前端，怎么能容忍这种方法呢？特以此篇，记录利用koa2搭建服务端，提供mock数据的方法。</p><a id="more"></a><h2 id="初始化vue项目"><a href="#初始化vue项目" class="headerlink" title="初始化vue项目"></a>初始化vue项目</h2><p>这里以vue项目为主，当然别的类型项目依然可以使用这种mock数据的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-koa2-demo</span><br></pre></td></tr></table></figure><p>前提是安装了vue-cli的脚手架，我电脑安装的是vue-cli3的版本。按照要求一步一步选择后，记得选择安装vuex，后续要使用，启动项目。</p><h2 id="koa2项目初始化"><a href="#koa2项目初始化" class="headerlink" title="koa2项目初始化"></a>koa2项目初始化</h2><p>前端项目弄好之后，开始安装koa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir koa-demo</span><br><span class="line">cd koa-demo</span><br><span class="line">npm koa koa-router koa-cors</span><br></pre></td></tr></table></figure><p>安装工作完成后，在项目根目录下新建一个server.js.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let Koa=require(&apos;koa&apos;)</span><br><span class="line">let Router=require(&apos;koa-router&apos;)</span><br><span class="line">let cors=require(&apos;koa-cors&apos;)</span><br><span class="line">let fs=require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">const app=new Koa()</span><br><span class="line">const router=new Router()</span><br><span class="line"></span><br><span class="line">router.get(&apos;/getData&apos;,async ctx=&gt;&#123;</span><br><span class="line">  // 允许cors跨域请求</span><br><span class="line">  await cors();</span><br><span class="line">  // 返回数据</span><br><span class="line">  ctx.body=JSON.parse(fs.readFileSync(&apos;./static/data.json&apos;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 将koa和中间件连起来</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">let port=3000;</span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  console.log(&apos;server is running on&apos;+port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面请求了一个data.json。需要在项目根目录下新建文件夹static，新建data.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;曹操&quot;,</span><br><span class="line">  &quot;age&quot;: &quot;18&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;id&quot;: 2,</span><br><span class="line">  &quot;name&quot;: &quot;孙权&quot;,</span><br><span class="line">  &quot;age&quot;: &quot;20&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;id&quot;: 3,</span><br><span class="line">  &quot;name&quot;: &quot;刘备&quot;,</span><br><span class="line">  &quot;age&quot;: &quot;24&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;id&quot;: 4,</span><br><span class="line">  &quot;name&quot;: &quot;魏延&quot;,</span><br><span class="line">  &quot;age&quot;: &quot;28&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>在终端中执行命令启动koa项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>当看到下图时，表示启动项目成功</p><p><img src="/2020/05/17/vue-koa2-mock-demo/image1.png" alt="image2"></p><h2 id="改造前端项目"><a href="#改造前端项目" class="headerlink" title="改造前端项目"></a>改造前端项目</h2><ul><li>修改Home.vue文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;p&gt;姓名:&#123;&#123; item.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;年龄:&#123;&#123; item.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    list() &#123;</span><br><span class="line">      return this.$store.state.list;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getlist();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getlist() &#123;</span><br><span class="line">      this.$store.dispatch(&apos;getData&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>修改App.vue文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>修改store/index.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import Vuex from &quot;vuex&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setlist(state, data) &#123;</span><br><span class="line">      state.list = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getData(&#123; commit &#125;) &#123;</span><br><span class="line">      axios</span><br><span class="line">        .get(&quot;/api/getData&quot;, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            Accept: &quot;application/json&quot;,</span><br><span class="line">            &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          if (res.status === 200) &#123;</span><br><span class="line">            return res.data;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          commit(&quot;setlist&quot;, Array.from(res));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>记得提前安装axios，这里需要使用axios请求后端接口。</p><ul><li>新建配置文件<br>在根目录下新建一个vue.config.js，由于前后端项目存在跨域，需要使用代理实现。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: 8085, // 端口号</span><br><span class="line">    https: false, // https:&#123;type:Boolean&#125;</span><br><span class="line">    open: true, //配置自动启动浏览器</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &quot;/api&quot;: &#123;</span><br><span class="line">        target: &quot;http://127.0.0.1:3000&quot;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &quot;^/api&quot;: &quot;/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重新启动项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><p>就会看到页面上显示出了koa-demo项目里定义的json数据了，大功告成。</p><p><img src="/2020/05/17/vue-koa2-mock-demo/image2.png" alt="image2"></p><p>这样以后就可以将mock数据的项目和具体前端项目分离开，更方便的使用。再也不用求着后端给mock数据了，自己搞！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://koa.bootcss.com/" target="_blank" rel="noopener">koa官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间写了一篇&lt;a href=&quot;https://rocky-191.github.io/2020/05/05/vue-mock-demo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端vue项目实现mock数据方式&lt;/a&gt;的文章，主要是在vue项目里使用mock数据，数据和项目耦合在一起，不太优雅，作为一个有追求的前端，怎么能容忍这种方法呢？特以此篇，记录利用koa2搭建服务端，提供mock数据的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="koa2" scheme="http://yoursite.com/tags/koa2/"/>
    
  </entry>
  
  <entry>
    <title>前端vue项目实现mock数据方式</title>
    <link href="http://yoursite.com/2020/05/05/vue-mock-demo/"/>
    <id>http://yoursite.com/2020/05/05/vue-mock-demo/</id>
    <published>2020-05-05T07:35:38.000Z</published>
    <updated>2020-05-05T07:40:57.451Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离开发已成大势所趋，基本上大部分公司的开发模式都是如此，那如何自己本地实现一个数据mock呢？当然你也可以使用在线的工具，比如<a href="https://www.easy-mock.com/login" target="_blank" rel="noopener">easymock</a>也可以实现mock数据，但是如果追求稳定性，还是本地搭一套环境吧。下面我介绍的是使用了vue-cli本身自带的功能实现mock 数据。</p><a id="more"></a><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>（1）使用vue-cli初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create mock-demo</span><br></pre></td></tr></table></figure><p>全部采用默认即可</p><p>（2）创建配置文件</p><p>在项目根目录下创建vue.config.js配置文件。内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">"production"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> feMock;</span><br><span class="line"><span class="keyword">if</span> (!isProduction) &#123;</span><br><span class="line">  feMock = <span class="built_in">require</span>(<span class="string">"./mockApi"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: isProduction ? <span class="string">"././"</span> : <span class="string">""</span>,</span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: <span class="string">"src/main.js"</span>,</span><br><span class="line">      template: <span class="string">"public/index.html"</span>,</span><br><span class="line">      filename: <span class="string">"index.html"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    before: <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 关键代码</span></span><br><span class="line">      app.use(bodyParser.json());</span><br><span class="line">      app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">      <span class="keyword">if</span> (!isProduction) &#123;</span><br><span class="line">        feMock(app);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里主要是利用了webpack-dev-server实现的mock功能，为了实现接口请求，当然需要提前安装axios，body-parser。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios body-parser -S</span><br></pre></td></tr></table></figure><h2 id="编写mock的API"><a href="#编写mock的API" class="headerlink" title="编写mock的API"></a>编写mock的API</h2><p>（1）在项目根目录新建文件夹mockApi，新建index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> feMock = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.get(<span class="string">"/mock/api/news"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      name: <span class="string">"tom"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports=feMock;</span><br></pre></td></tr></table></figure><p>（2）在src目录下新建一个api文件夹，新建文件index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prefix = <span class="string">"/mock"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    _testMock() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$http.get(<span class="string">`<span class="subst">$&#123;prefix&#125;</span>/api/news`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的请求路径一定要和上一步mock数据的路径保持一致。等后端写好接口之后，统一修改此文件里的prefix接口即可。</p><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><p>（1）在App.vue里使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import api from &quot;./api&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  mixins: [api],</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.testMock();</span><br><span class="line">    this.testMock1();</span><br><span class="line">    this.testPostMock();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    testMock() &#123;</span><br><span class="line">      this._testMock()</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err =&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>正常启动项目后，在浏览器network里就可以看到请求了，初始功能实现。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>（1）如果项目中多个人写多个mock文件怎么整呢？</p><p>（2）能不能直接扫描特定目录加载mock文件呢？是否可以有一个统一的对外入口，每个人只需要写自己的mock文件，不用修改出口？</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>（1）在mockApi文件夹下新建一个mockList文件夹，之后所有人的mock接口写在这里。示例如下：</p><p>在mockList中新建一个test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMock</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">"/mock/api/news"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      name: <span class="string">"tom"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testPostMock</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.post(<span class="string">"/mock/api/news"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        data: <span class="string">"success"</span>,</span><br><span class="line">        desc: <span class="string">""</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = [testMock, testPostMock];</span><br></pre></td></tr></table></figure><p>在mockList中新建一个test1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMock1</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">"/mock/api/news1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      name: <span class="string">"jack"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = [testMock1];</span><br></pre></td></tr></table></figure><p>(2)修改mockApi/index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = __dirname;</span><br><span class="line"><span class="keyword">const</span> files = fs.readdirSync(path + <span class="string">"/mockList"</span>);</span><br><span class="line"><span class="keyword">const</span> mockList = [];</span><br><span class="line">files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> model = <span class="built_in">require</span>(path + <span class="string">"/mockList/"</span> + filename);</span><br><span class="line">  mockList.push(...model);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMock</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  mockList.forEach(<span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">    func(app);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleMock;</span><br></pre></td></tr></table></figure><p>引入fs,自动读取设定目录下的文件，这样配置好之后，其他人只管写自己的mock接口，不需要去修改这个对外的文件，这样就完美解决了。</p><p>示例代码目录结构如下：</p><p><img src="/2020/05/05/vue-mock-demo/content.png" alt="content"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前后端分离开发已成大势所趋，基本上大部分公司的开发模式都是如此，那如何自己本地实现一个数据mock呢？当然你也可以使用在线的工具，比如&lt;a href=&quot;https://www.easy-mock.com/login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;easymock&lt;/a&gt;也可以实现mock数据，但是如果追求稳定性，还是本地搭一套环境吧。下面我介绍的是使用了vue-cli本身自带的功能实现mock 数据。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>探索webpack构建速度提升方法和优化策略</title>
    <link href="http://yoursite.com/2020/03/08/learnwebpack3/"/>
    <id>http://yoursite.com/2020/03/08/learnwebpack3/</id>
    <published>2020-03-08T15:00:29.000Z</published>
    <updated>2020-03-08T15:06:21.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、使用webpack内置得stats分析相关文件"><a href="#一、使用webpack内置得stats分析相关文件" class="headerlink" title="一、使用webpack内置得stats分析相关文件"></a>一、使用webpack内置得stats分析相关文件</h2><p>stats: 构建的统计信息，package.json 中使用 stats，方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;build:stats&quot;: &quot;webpack --env production --json &gt; stats.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是vue-cli3搭建的项目工程，也可以按照下面得方式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;build:stats&quot;: &quot;vue-cli-service build --mode prod --json &gt; stats.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好之后，运行命令，就会在根目录生成一个stats.json文件，可以查看分析结果。这种方式只是初级分析，颗粒度较大。</p><h2 id="二、使用speed-measure-webpack-plugin进行速度分析"><a href="#二、使用speed-measure-webpack-plugin进行速度分析" class="headerlink" title="二、使用speed-measure-webpack-plugin进行速度分析"></a>二、使用speed-measure-webpack-plugin进行速度分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm install --save-dev speed-measure-webpack-plugin</span><br><span class="line"></span><br><span class="line">// 使用方式</span><br><span class="line">const SpeedMeasurePlugin = require(&quot;speed-measure-webpack-plugin&quot;);</span><br><span class="line"> </span><br><span class="line">const smp = new SpeedMeasurePlugin();</span><br><span class="line"> </span><br><span class="line">const webpackConfig = smp.wrap(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new MyPlugin(),</span><br><span class="line">    new MyOtherPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置好之后，运行打包命令的时候就可以看到每个loader 和插件执行耗时。<br>参考：<a href="https://www.npmjs.com/package/speed-measure-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/speed-measure-webpack-plugin</a></p><h2 id="三、使用webpack-bundle-analyzer进行体积分析"><a href="#三、使用webpack-bundle-analyzer进行体积分析" class="headerlink" title="三、使用webpack-bundle-analyzer进行体积分析"></a>三、使用webpack-bundle-analyzer进行体积分析</h2><p>这个插件应该大部分前端小伙伴都使用过吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin;</span><br><span class="line"> </span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new BundleAnalyzerPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建完成后，会在.  <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a>   展示相关文件大小。按照提示就可以分析依赖的第三方模块文件大小和业务里面的组件代码大小。<br><img src="/2020/03/08/learnwebpack3/analyzer.png" alt="analyzer.png"></p><h2 id="四、使用多进程、多实例构建"><a href="#四、使用多进程、多实例构建" class="headerlink" title="四、使用多进程、多实例构建"></a>四、使用多进程、多实例构建</h2><p>采用这种方式对资源进行并行解析，有如下几种方案：</p><ol><li>thread-loader(官方推荐)<br>原理：每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给 worker 线程中。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 使用方式</span><br><span class="line">module.exports=&#123;</span><br><span class="line">    ...</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:/\.js$/,</span><br><span class="line">            use:[&#123;</span><br><span class="line">                loader:&apos;thread-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    workers: 3</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &apos;babel-loader&apos;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>parallel-webpack<br>原理：parallel-webpack允许您并行运行多个Webpack构建，从而将工作分散到各个处理器上，从而有助于显着加快构建速度。<br>参考：<a href="https://www.npmjs.com/package/parallel-webpack" target="_blank" rel="noopener">https://www.npmjs.com/package/parallel-webpack</a></li><li>HappyPack<br>原理：每次 webapck 解析一个模块时，HappyPack 会将它及它的依赖分配到worker线程中。<br>提示：由于HappyPack 对file-loader、url-loader 支持的不友好，所以不建议对该loader使用。<br>运行机制如下图所示： </li></ol><p><img src="/2020/03/08/learnwebpack3/happypack.png" alt="happypack.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm install --save-dev happypack</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">const HappyPack=require(&apos;happypack&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        new HappyPack(&#123;</span><br><span class="line">        id: &apos;jsx&apos;,</span><br><span class="line">        threads: 4,</span><br><span class="line">        loaders: [ &apos;babel-loader&apos; ]</span><br><span class="line">      &#125;),</span><br><span class="line">      new HappyPack(&#123;</span><br><span class="line">        id: &apos;styles&apos;,</span><br><span class="line">        threads: 2,</span><br><span class="line">        loaders: [ &apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos; ]</span><br><span class="line">      &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.npmjs.com/package/happypack" target="_blank" rel="noopener">https://www.npmjs.com/package/happypack</a><br>如果你使用vue-cli3构建项目的话，自动就会开启多线程打包。  </p><h2 id="五、多进程并行压缩代码"><a href="#五、多进程并行压缩代码" class="headerlink" title="五、多进程并行压缩代码"></a>五、多进程并行压缩代码</h2><p>方法一：使用webpack-parallel-uglify-plugin插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const parallelUglifyPlugin=require(&apos;webpack-parallel-uglify-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new parallelUglifyPlugin(&#123;</span><br><span class="line">      // Optional regex, or array of regex to match file against. Only matching files get minified.</span><br><span class="line">      // Defaults to /.js$/, any file ending in .js.</span><br><span class="line">      test,</span><br><span class="line">      include, // Optional regex, or array of regex to include in minification. Only matching files get minified.</span><br><span class="line">      exclude, // Optional regex, or array of regex to exclude from minification. Matching files are not minified.</span><br><span class="line">      cacheDir, // Optional absolute path to use as a cache. If not provided, caching will not be used.</span><br><span class="line">      workerCount, // Optional int. Number of workers to run uglify. Defaults to num of cpus - 1 or asset count (whichever is smaller)</span><br><span class="line">      sourceMap, // Optional Boolean. This slows down the compilation. Defaults to false.</span><br><span class="line">      uglifyJS: &#123;</span><br><span class="line">        // These pass straight through to uglify-js@3.</span><br><span class="line">        // Cannot be used with uglifyES.</span><br><span class="line">        // Defaults to &#123;&#125; if not neither uglifyJS or uglifyES are provided.</span><br><span class="line">        // You should use this option if you need to ensure es5 support. uglify-js will produce an error message</span><br><span class="line">        // if it comes across any es6 code that it can&apos;t parse.</span><br><span class="line">      &#125;,</span><br><span class="line">      uglifyES: &#123;</span><br><span class="line">        // These pass straight through to uglify-es.</span><br><span class="line">        // Cannot be used with uglifyJS.</span><br><span class="line">        // uglify-es is a version of uglify that understands newer es6 syntax. You should use this option if the</span><br><span class="line">        // files that you&apos;re minifying do not need to run in older browsers/versions of node.</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法二：使用uglify-webpack-plugin插件，开启parallel参数（备注：之前webpack版本使用，不支持压缩ES6的语法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line"> </span><br><span class="line">module.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [new UglifyJsPlugin()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法三：使用terser-webpack-plugin插件,开启parallel参数（推荐使用，支持压缩ES6的语法）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 安装terset-webpack-plugin</span><br><span class="line">npm install terser-webpack-plugin --save-dev</span><br><span class="line"></span><br><span class="line">// 使用方式：</span><br><span class="line">// webpack.config.js</span><br><span class="line">const TerserPlugin = require(&apos;terser-webpack-plugin&apos;);</span><br><span class="line"> </span><br><span class="line">module.exports = &#123;</span><br><span class="line">  optimization: minimize: true,</span><br><span class="line">    minimizer: [</span><br><span class="line">      new TerserPlugin(&#123;</span><br><span class="line">        parallel: true</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="六、采用分包方式预编译资源模块"><a href="#六、采用分包方式预编译资源模块" class="headerlink" title="六、采用分包方式预编译资源模块"></a>六、采用分包方式预编译资源模块</h2><p>可以将vue、vuex、vue-router基础包和业务基础包打包成一个文件。<br>方法：使用DLLPlugin进行分包，DllReferencePlugin对manifest.json引用。<br>第一步：使用DLLPlugin进行分包,创建一个webpack.dll.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path=require(&quot;path&quot;);</span><br><span class="line">const webpack=require(&quot;webpack&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        library:[&apos;vue&apos;,&apos;vuex&apos;,&apos;vue-router&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&apos;[name]_[chunkhash].dll.js&apos;,</span><br><span class="line">        path:path.resolve(__dirname,&apos;./build/library&apos;),</span><br><span class="line">        library:&apos;[name]&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.DllPlugin(&#123;</span><br><span class="line">            name: &apos;[name]_[hash]&apos;,</span><br><span class="line">            path: resolve(__dirname,&apos;./build/library/[name].json&apos;)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：<br>在package.json中增加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dll&quot;: &quot;webpack --config webpack.dll.js&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>运行这条命令，就会生成一个分出的基础包。<br>第三步：在webpack配置文件中增加一个在生产环境起作用的插件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        new webpack.DllReferencePlugin(&#123;</span><br><span class="line">            manifest: require(&apos;./build/library/library.json&apos;)</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、利用缓存提升二次构建速度"><a href="#七、利用缓存提升二次构建速度" class="headerlink" title="七、利用缓存提升二次构建速度"></a>七、利用缓存提升二次构建速度</h2><p>方法：<br>（1）babel-loader开启缓存<br>（2）terset-webpack-plugin开启缓存  (webpack4推荐)<br>（3）使用cache-loader   或者hard-source-webpack-plugin</p><h2 id="八、缩小构建目标"><a href="#八、缩小构建目标" class="headerlink" title="八、缩小构建目标"></a>八、缩小构建目标</h2><p>方法一：比如babel-loaader不去解析node_modules  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                loader: &apos;babel-loader&apos;,</span><br><span class="line">                exclude: &apos;node_modules&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：减少文件搜索范围<br>（1）优化 resolve.modules配置(减少模块搜索层级)<br>（2）优化 resolve.mainFields 配置<br>（3）优化 resolve.extensions 配置<br>（4）合理使用 alias</p><h2 id="九、使用tree-shaking"><a href="#九、使用tree-shaking" class="headerlink" title="九、使用tree-shaking"></a>九、使用tree-shaking</h2><p>1个模块可能有多个方法，只要其中的某个方法使用到了，则整个文件都会被打到 bundle 里面去，tree shaking 就是只把用到的方法打入 bundle ，没用到的方法会在 uglify 阶段被擦除掉。  </p><p>使用:webpack 默认支持，在 .babelrc 里设置 modules: false 即可。production mode的情况下默认开启  </p><p>要求:必须是 ES6 的语法，CJS 的方式不支持</p><p>在webpack构建过程中移除无用的css代码方式。<br>使用purgecss-webpack-plugin，配合mini-css-extract-plugin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const glob = require(&apos;glob&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);</span><br><span class="line">const PurgecssPlugin = require(&apos;purgecss-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">const PATHS = &#123;</span><br><span class="line">    src: path.join(__dirname, &apos;src&apos;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports=&#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &apos;css-loader&apos;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: &apos;[name]_[contenthash:8].css&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new PurgecssPlugin(&#123;</span><br><span class="line">            paths: glob.sync(`$&#123;PATHS.src&#125;/**/*`,  &#123; nodir: true &#125;),</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、对图片资源的压缩"><a href="#十、对图片资源的压缩" class="headerlink" title="十、对图片资源的压缩"></a>十、对图片资源的压缩</h2><p>在引入图片前可以使用某些在线图片压缩网站进行压缩，也可以在webpack中使用工具进行压缩。<br>这里我们使用一个image-webpack-loader来压缩图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm install image-webpack-loader --save-dev</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">module.exports=&#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">          test: /\.(gif|png|jpe?g|svg)$/i,</span><br><span class="line">          use: [</span><br><span class="line">                &apos;file-loader&apos;,</span><br><span class="line">                &#123;</span><br><span class="line">                  loader: &apos;image-webpack-loader&apos;,</span><br><span class="line">                  options: &#123;</span><br><span class="line">                    disable: true</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后尽可能的使用高版本的webpack和Node,由于版本优化，内置了许多功能，也可以优化webpack的打包速度。</p><p>另外在使用vue-cli3构建项目的过程中，vue-cli3本身其实也做了很多优化，上面的优化手段vue-cli3这个工具其实已经帮我们做过了，我们就不用重复配置了，具体想了解的话可以看一下vue-cli3配置的<a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-service/lib/config" target="_blank" rel="noopener">源码</a></p><p>以上就是在学习优化webpack打包过程中的一些学习笔记，特此记录，欢迎小伙伴交流学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、使用webpack内置得stats分析相关文件&quot;&gt;&lt;a href=&quot;#一、使用webpack内置得stats分析相关文件&quot; class=&quot;headerlink&quot; title=&quot;一、使用webpack内置得stats分析相关文件&quot;&gt;&lt;/a&gt;一、使用webpack
      
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>假期无聊，不如写写简单版React</title>
    <link href="http://yoursite.com/2020/01/29/learnreact1/"/>
    <id>http://yoursite.com/2020/01/29/learnreact1/</id>
    <published>2020-01-29T11:51:56.000Z</published>
    <updated>2020-01-29T12:12:50.887Z</updated>
    
    <content type="html"><![CDATA[<p>各位小伙伴，春节假期已过大半，这个春节应该是历年来过的最安静的一个春节了吧，天天家里蹲，吃了睡，睡了吃，没想到不出门竟然成了对社会最大的贡献。废话不多说，开始说正题。  </p><p>相信很多人都用过react开发项目，也有很多人好奇页面中明明没有直接用到React，但是页面却必须引入React，否则就会报错。初学者一定有这个疑问，不要着急，今天我就为你解答这个疑问。</p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="jsx是个啥？"><a href="#jsx是个啥？" class="headerlink" title="jsx是个啥？"></a>jsx是个啥？</h3><p>jsx其实就是个语法糖，用写html的方式来写js，一个很像xml的js扩展。React使用jsx来替代常规的js。<a href="https://reactjs.org/" target="_blank" rel="noopener">在线体验</a></p><h3 id="为什么要引入jsx？"><a href="#为什么要引入jsx？" class="headerlink" title="为什么要引入jsx？"></a>为什么要引入jsx？</h3><p>写js不香吗？为什么要引入一个新概念jsx来迷惑大家？概括来讲jsx来讲有以下几个好处：</p><ul><li>提升开发效率。使用jsx来写模版速度嗖嗖的。</li><li>提升执行效率。jsx编译为js代码后进行来很多优化，执⾏更快。</li><li>类型安全。在编译过程中就能发现错误。</li></ul><p>尝试过上面的在线体验后，就会发现实际上babel-loader会把jsx预编译为React.createElement(xxx)。<br><strong>jsx预处理前：</strong>  </p><p><img src="https://user-gold-cdn.xitu.io/2020/1/29/16ff0e6f63326709?w=1174&amp;h=758&amp;f=jpeg&amp;s=94971" alt=""></p><p><strong>jsx预处理后</strong></p><p><img src="https://user-gold-cdn.xitu.io/2020/1/29/16ff0e8c4a5fe52c?w=1168&amp;h=698&amp;f=jpeg&amp;s=102427" alt=""><br>通过以上两张图片对比可以解答文章开头的疑问，为什么React没有使用，却必须引入？其实并不是没有使用，只不过没有直接使用，需要经过babel转化。另外可以看出React几个核心API：React.createElement, React.Component, ReactDom.render。</p><p>接下来我们就自己动手来实现这三个API吧！</p><h2 id="核心API实现（简版）"><a href="#核心API实现（简版）" class="headerlink" title="核心API实现（简版）"></a>核心API实现（简版）</h2><h3 id="createElement和Component"><a href="#createElement和Component" class="headerlink" title="createElement和Component"></a>createElement和Component</h3><p>作用：将传入的节点转化成vdom。<br>（1）创建./simple-react/component.js。实现class组件必备条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export class Component&#123;</span><br><span class="line">    static isReactComponent=&#123;&#125;;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        this.props=props;</span><br><span class="line">        this.state=&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建./simple-react/index.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component&#125; from &quot;./component&quot;</span><br><span class="line"></span><br><span class="line">function createElement(type,props,...children)&#123;</span><br><span class="line">    props.children=children;</span><br><span class="line">    // console.log(type);</span><br><span class="line">    // 判断组件类型</span><br><span class="line">    let vtype;</span><br><span class="line">    if(typeof type===&quot;string&quot;)&#123;</span><br><span class="line">        // 原生标签</span><br><span class="line">        vtype=1;</span><br><span class="line">    &#125;else if(typeof type === &quot;function&quot;)&#123;</span><br><span class="line">        // 类组件，函数式组件</span><br><span class="line">        vtype=type.isReactComponent ? 3 : 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">        vtype,</span><br><span class="line">        type,</span><br><span class="line">        props</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const React=&#123;</span><br><span class="line">    createElement,</span><br><span class="line">    Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default React;</span><br></pre></td></tr></table></figure><p>上面我只是简单使用了1、2、3来分别标示来标签类型，你也可以使用别的方式来处理。createElement被调用时会传入标签类型type，标签属性props及若⼲子元素children。</p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>作用：渲染vdom，挂载到真实dom树上。<br>创建./simple-react/ReactDOM.js文件，包含render函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function render(vnode,container)&#123;</span><br><span class="line">    // vnode-&gt;node</span><br><span class="line">    mount(vnode,container); // 待实现</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ReactDOM=&#123;</span><br><span class="line">    render</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ReactDOM;</span><br></pre></td></tr></table></figure><p>这样就实现了代码中的常见的ReactDOM.render(jsx,container)。接下来重点实现mount函数来处理vnode挂载。<br>创建./simple-react/virtual-dom.js文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">export function mount(vnode,container)&#123;</span><br><span class="line">    const &#123;vtype&#125;=vnode;</span><br><span class="line">    if(!vtype)&#123;</span><br><span class="line">        // 纯文本节点</span><br><span class="line">        mountText(vnode,container);</span><br><span class="line">    &#125;</span><br><span class="line">    if(vtype===1)&#123;</span><br><span class="line">        // 原生节点</span><br><span class="line">        mountHtml(vnode,container);</span><br><span class="line">    &#125;</span><br><span class="line">    if(vtype===2)&#123;</span><br><span class="line">        // 创建函数式节点</span><br><span class="line">        mountFunc(vnode,container)</span><br><span class="line">    &#125;</span><br><span class="line">    if(vtype===3)&#123;</span><br><span class="line">        // 创建class类型组件</span><br><span class="line">        mountClass(vnode,container);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mountText(vnode,container)&#123;</span><br><span class="line">    let textNode=document.createTextNode(vnode);</span><br><span class="line">    container.appendChild(textNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mountHtml(vnode,container)&#123;</span><br><span class="line">    const &#123;type,props&#125;=vnode;</span><br><span class="line">    let htmlNode=document.createElement(type);</span><br><span class="line">    const &#123;children,...rest&#125;=props;</span><br><span class="line">    Object.keys(rest).map(item=&gt; &#123;</span><br><span class="line">        if(item===&quot;className&quot;)&#123;</span><br><span class="line">            htmlNode.setAttribute(&quot;class&quot;,rest[item]);</span><br><span class="line">        &#125;</span><br><span class="line">        if(item.slice(0,2)===&quot;on&quot;)&#123;</span><br><span class="line">            // 简单处理click事件，实际情况很复杂，需要考虑多种情况</span><br><span class="line">            htmlNode.addEventListener(&quot;click&quot;,rest[item])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    children.map(item=&gt;&#123;</span><br><span class="line">        if(Array.isArray(item))&#123;</span><br><span class="line">            item.map(i=&gt;mount(i,htmlNode))</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            mount(item,htmlNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    container.appendChild(htmlNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mountFunc(vnode,container)&#123;</span><br><span class="line">    const &#123;type,props&#125;=vnode;</span><br><span class="line">    let node=type(props);</span><br><span class="line">    mount(node,container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mountClass(vnode,container)&#123;</span><br><span class="line">    const &#123;type,props&#125;=vnode;</span><br><span class="line">    let cmp=new type(props);</span><br><span class="line">    let node=cmp.render();</span><br><span class="line">    mount(node,container);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mount函数创建好之后，完整的ReactDOM文件就可以改写为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mount&#125; from &quot;./virtual-dom&quot;;</span><br><span class="line"></span><br><span class="line">function render(vnode,container)&#123;</span><br><span class="line">    // vnode-&gt;node</span><br><span class="line">    mount(vnode,container)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ReactDOM=&#123;</span><br><span class="line">    render</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ReactDOM;</span><br></pre></td></tr></table></figure><p>相关文件创建好之后，在由creat-react-app创建好的项目中改写index.js文件，引入自己写好的简版react文件，进行测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;./simple-react&quot;;</span><br><span class="line">import ReactDOM from &quot;./simple-react/ReactDOM&quot;;</span><br><span class="line">import &apos;./index.css&apos;</span><br><span class="line">function Funcomp(props)&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&quot;border&quot;&gt;&#123;props.name&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ClassComp extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick=()=&gt;&#123;</span><br><span class="line">        alert(&quot;hello&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123; </span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;border&quot;&gt;</span><br><span class="line">                &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    [1,2,3].map(item=&gt;</span><br><span class="line">                    (</span><br><span class="line">                        &lt;h1 key=&#123;item&#125;&gt;&#123;item&#125;&lt;/h1&gt;</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                &#125;</span><br><span class="line">                &lt;button onClick=&#123;this.handleClick&#125;&gt;点我&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jsx=(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div className=&quot;border&quot;&gt;我是内容&lt;/div&gt;</span><br><span class="line">        &lt;Funcomp name=&quot;我是函数组件内容&quot; /&gt;</span><br><span class="line">        &lt;ClassComp name=&quot;我是class组件内容&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(jsx,document.getElementById(&quot;root&quot;))</span><br></pre></td></tr></table></figure><p>实际页面效果如果和下面截图一样，代表着简版react大功告成。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/29/16ff10a387a870e6?w=3348&amp;h=848&amp;f=jpeg&amp;s=174595" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>webpack+babel编译时，替换jsx为React.createElement(type,props,…children)。</li><li>所有React.createElement()执⾏结束后得到⼀个JS对象即vdom，一个能够完整描述dom结构的对象。</li><li>ReactDOM.render(vdom,container)可以将vdom转换为真实dom并添加container中。</li></ul><p>当然在实际react处理中，要处理的情况远比上面写的复杂多得多，dom的更新、替换、删除要经过diff的过程，打补丁，更新布丁等过程，v16.8之后的fiber更是类似于时间分片的方式，将任务拆分，将高优先级任务优先执行，提高页面渲染的流畅度等等，有很多需要我们掌握的东西。  </p><p><strong>应了那句话：路漫漫其修远兮，吾将上下而求索。</strong></p><p>欢迎点赞、留言、交流。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://react.docschina.org/" target="_blank" rel="noopener">React中文网</a></li><li><a href="https://github.com/facebook/react" target="_blank" rel="noopener">React源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;各位小伙伴，春节假期已过大半，这个春节应该是历年来过的最安静的一个春节了吧，天天家里蹲，吃了睡，睡了吃，没想到不出门竟然成了对社会最大的贡献。废话不多说，开始说正题。  &lt;/p&gt;
&lt;p&gt;相信很多人都用过react开发项目，也有很多人好奇页面中明明没有直接用到React，但是
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>通过bundler学习webpack模块依赖分析</title>
    <link href="http://yoursite.com/2019/12/22/learnwebpack2/"/>
    <id>http://yoursite.com/2019/12/22/learnwebpack2/</id>
    <published>2019-12-22T05:36:54.000Z</published>
    <updated>2019-12-22T05:38:31.796Z</updated>
    
    <content type="html"><![CDATA[<p>你知道webpack是如何分析模块各个依赖关系的？是如何将ES6代码编译成浏览器可执行代码的吗？</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><ul><li>创建文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir bundler</span><br><span class="line">cd bundler</span><br></pre></td></tr></table></figure><ul><li>创建相关文件<br>在bundler中创建src文件夹，在src文件夹新建index.js,message.js,word.js。文件内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// word.js</span><br><span class="line">export const word=&quot;word&quot;;</span><br><span class="line"></span><br><span class="line">// message.js</span><br><span class="line">import &#123;word&#125; from &quot;./word.js&quot;;</span><br><span class="line">const message=`hello $&#123;word&#125;`;</span><br><span class="line">export default message;</span><br><span class="line"></span><br><span class="line">// index.js</span><br><span class="line">import message from &quot;./message.js&quot;;</span><br><span class="line">console.log(message);</span><br></pre></td></tr></table></figure><p>如果想直接在浏览器中运行index.js的话，当然是不能的，浏览器无法识别es6的语法，以前我们都是通过类似webpack的打包工具将es6代码转换成es5的代码，然后直接在浏览器中运行。</p><h2 id="入口文件依赖分析"><a href="#入口文件依赖分析" class="headerlink" title="入口文件依赖分析"></a>入口文件依赖分析</h2><p>在项目根目录下新建一个bundler文件，实现打包过程。其实所谓的webpack编译打包就是通过一些特定的方法函数将源代码转换成浏览器可识别的代码</p><ul><li><p>定义一个模块分析函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const moduleAnalyser=(filename)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">moduleAnalyser(&quot;./src/index.js&quot;);// 入口函数</span><br></pre></td></tr></table></figure></li><li><p>读取文件内容<br>这里使用了node中的一个核心模块fs。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const fs=require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">const moduleAnalyser=(filename)=&gt;&#123;</span><br><span class="line">    const content=fs.readFileSync(filename,&quot;utf-8&quot;);// 读取文件内容</span><br><span class="line">    console.log(content);</span><br><span class="line">&#125;</span><br><span class="line">moduleAnalyser(&quot;./src/index.js&quot;);// 入口函数</span><br></pre></td></tr></table></figure><p>在终端中执行node命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node bundler.js</span><br></pre></td></tr></table></figure><p>就会输出index.js的文件内容<br><img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2b501f84a10a6?w=1164&amp;h=306&amp;f=jpeg&amp;s=36680" alt=""></p><ul><li>解析文件依赖  </li></ul><p>（1）执行npm init -y初始化</p><p>（2）安装一个babel模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/parser --save</span><br></pre></td></tr></table></figure><p>（3）使用parser</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const fs=require(&quot;fs&quot;);</span><br><span class="line">const parser=require(&quot;@babel/parser&quot;);</span><br><span class="line"></span><br><span class="line">const moduleAnalyser=(filename)=&gt;&#123;</span><br><span class="line">    const content=fs.readFileSync(filename,&quot;utf-8&quot;);// 读取文件内容</span><br><span class="line">    console.log(parser.parse(content,&#123;</span><br><span class="line">        sourceType:&quot;module&quot;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">moduleAnalyser(&quot;./src/index.js&quot;);// 入口函数</span><br></pre></td></tr></table></figure><p>再次执行node命令，node bundler.js，查看文件内容,输出的就是常说的AST,描述了文件的相关依赖关系。<br><img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2b6380de1e667?w=1584&amp;h=982&amp;f=jpeg&amp;s=133569" alt=""></p><p>修改一下bundler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">const ast=parser.parse(content,&#123;</span><br><span class="line">        sourceType:&quot;module&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(ast.program.body);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>执行node bundler.js命令就会得到如下输出内容<img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2b6aced3c5014?w=1616&amp;h=1284&amp;f=jpeg&amp;s=183744" alt=""><br>输出的就是文件相关依赖，type为ImportDeclaration表示是引入声明，type为ExpressionStatement表示是表达式。接下来要做的就是遍历body的内容得到依赖关系。<br>（4）安装模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/traverse --save</span><br></pre></td></tr></table></figure><p>（5）使用traverse</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">traverse(ast,&#123;</span><br><span class="line">        ImportDeclaration(&#123;node&#125;)&#123;</span><br><span class="line">            console.log(node)// 查看node内容</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>继续改写bundler.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const dependencies=[];</span><br><span class="line">    traverse(ast,&#123;</span><br><span class="line">        ImportDeclaration(&#123;node&#125;)&#123;</span><br><span class="line">            dependencies.push(node.source.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(dependencies)// 得到依赖数组</span><br></pre></td></tr></table></figure><p>继续改写bundler.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const dependencies=&#123;&#125;;// 变成对象，key是依赖路径，value是相对依赖路径。便于之后使用</span><br><span class="line">    traverse(ast,&#123;</span><br><span class="line">        ImportDeclaration(&#123;node&#125;)&#123;</span><br><span class="line">            const dirname=path.dirname(filename);//filename对应的文件夹路径</span><br><span class="line">            const newFile=&quot;./&quot;+path.join(dirname,node.source.value);</span><br><span class="line">            dependencies[node.source.value]=newFile;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>（6）安装babel/core转换代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/preset-env --save</span><br></pre></td></tr></table></figure><p>（7）转换代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const &#123; code &#125;=babel.transformFromAst(ast,null,&#123;</span><br><span class="line">        presets:[&quot;@babel/preset-env&quot;]</span><br><span class="line">    &#125;)//转换ast</span><br><span class="line">    console.log(code);</span><br></pre></td></tr></table></figure><p>执行node bundler.js命令就会得到如下输出内容<br><img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2b8bbd776fa20?w=2076&amp;h=444&amp;f=jpeg&amp;s=84412" alt=""></p><p>入口文件的依赖分析就完成了。完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const fs=require(&quot;fs&quot;);</span><br><span class="line">const path=require(&quot;path&quot;);</span><br><span class="line">const babel=require(&quot;@babel/core&quot;);</span><br><span class="line">const parser=require(&quot;@babel/parser&quot;);</span><br><span class="line">const traverse=require(&quot;@babel/traverse&quot;).default;// 默认es module导出</span><br><span class="line"></span><br><span class="line">const moduleAnalyser=(filename)=&gt;&#123;</span><br><span class="line">    const content=fs.readFileSync(filename,&quot;utf-8&quot;);// 读取文件内容</span><br><span class="line">    const ast=parser.parse(content,&#123;</span><br><span class="line">        sourceType:&quot;module&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    const dependencies=&#123;&#125;;</span><br><span class="line">    traverse(ast,&#123;</span><br><span class="line">        ImportDeclaration(&#123;node&#125;)&#123;</span><br><span class="line">            const dirname=path.dirname(filename);//filename对应的文件夹路径</span><br><span class="line">            const newFile=&quot;./&quot;+path.join(dirname,node.source.value);</span><br><span class="line">            dependencies[node.source.value]=newFile;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const &#123; code &#125; = babel.transformFromAst(ast,null,&#123;</span><br><span class="line">        presets:[&quot;@babel/preset-env&quot;]</span><br><span class="line">    &#125;)//转换ast</span><br><span class="line">    return &#123;</span><br><span class="line">        filename,</span><br><span class="line">        dependencies,</span><br><span class="line">        code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleInfo=moduleAnalyser(&quot;./src/index.js&quot;);// 入口函数</span><br><span class="line">console.log(moduleInfo);</span><br></pre></td></tr></table></figure><h2 id="构建依赖图谱"><a href="#构建依赖图谱" class="headerlink" title="构建依赖图谱"></a>构建依赖图谱</h2><p>一个项目不可能只有一个文件，这就需要我们分析整个项目的依赖关系，即生成得到依赖图谱。</p><ul><li>定义生成依赖图谱方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const makeDependenciesGraph=(entry)=&gt;&#123;</span><br><span class="line">    const entryModule=moduleAnalyser(entry);</span><br><span class="line">    console.log(entryModule);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从入口开始，循环递归分析依赖关系</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const makeDependenciesGraph=(entry)=&gt;&#123;</span><br><span class="line">    const entryModule=moduleAnalyser(entry);</span><br><span class="line">    const graphArray=[entryModule];</span><br><span class="line">    for(let i=0;i&lt;graphArray.length;i++)&#123;</span><br><span class="line">        const item=graphArray[i];</span><br><span class="line">        const &#123; dependencies &#125; = item; // 解构出依赖</span><br><span class="line">        if(dependencies)&#123;</span><br><span class="line">            for(let j in dependencies)&#123;</span><br><span class="line">                // 递归分析依赖,放入依赖图谱数组</span><br><span class="line">                graphArray.push(moduleAnalyser(dependencies[j]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(graphArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行node bundler.js命令就会得到如下输出内容<img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2be107bc7d1cc?w=2336&amp;h=828&amp;f=jpeg&amp;s=310778" alt=""></p><ul><li>生成依赖图谱graph对象，完整代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const makeDependenciesGraph=(entry)=&gt;&#123;</span><br><span class="line">    const entryModule=moduleAnalyser(entry);</span><br><span class="line">    const graphArray=[entryModule];</span><br><span class="line">    for(let i=0;i&lt;graphArray.length;i++)&#123;</span><br><span class="line">        const item=graphArray[i];</span><br><span class="line">        const &#123; dependencies &#125; = item; // 解构出依赖</span><br><span class="line">        if(dependencies)&#123;</span><br><span class="line">            for(let j in dependencies)&#123;</span><br><span class="line">                // 递归分析依赖,放入依赖图谱数组</span><br><span class="line">                graphArray.push(moduleAnalyser(dependencies[j]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 转换为对象 便于使用</span><br><span class="line">    const graph=&#123;&#125;</span><br><span class="line">    graphArray.forEach(item=&gt;&#123;</span><br><span class="line">        graph[item.filename]=&#123;</span><br><span class="line">            dependencies:item.dependencies,</span><br><span class="line">            code:item.code</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成浏览器可识别代码"><a href="#生成浏览器可识别代码" class="headerlink" title="生成浏览器可识别代码"></a>生成浏览器可识别代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const generateCode=(entry)=&gt;&#123;</span><br><span class="line">    const graph=JSON.stringify(makeDependenciesGraph(entry));</span><br><span class="line">    return `</span><br><span class="line">        (function(graph)&#123;</span><br><span class="line">            function require(module)&#123;</span><br><span class="line">                function localRequire(relativePath)&#123;</span><br><span class="line">                    return require(graph[module].dependencies[relativePath])</span><br><span class="line">                &#125;</span><br><span class="line">                var exports=&#123;&#125;;</span><br><span class="line">                (function(require,exports,code)&#123;</span><br><span class="line">                    eval(code)</span><br><span class="line">                &#125;)(localRequire,exports,graph[module].code);</span><br><span class="line">                return exports;</span><br><span class="line">            &#125;;</span><br><span class="line">            require(&apos;$&#123;entry&#125;&apos;);</span><br><span class="line">        &#125;)($&#123;graph&#125;)</span><br><span class="line">    `;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行node bundler.js命令就会得到如下输出内容<img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2c0a097ac14e4?w=2336&amp;h=1010&amp;f=jpeg&amp;s=357701" alt=""><br>将输入内容拷贝后到浏览器console中执行，便会得到代码的正常输出<img src="https://user-gold-cdn.xitu.io/2019/12/22/16f2c0c48d6fb103?w=3346&amp;h=684&amp;f=jpeg&amp;s=412233" alt=""></p><p>bundler文件完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">const fs=require(&quot;fs&quot;);</span><br><span class="line">const path=require(&quot;path&quot;);</span><br><span class="line">const babel=require(&quot;@babel/core&quot;);</span><br><span class="line">const parser=require(&quot;@babel/parser&quot;);</span><br><span class="line">const traverse=require(&quot;@babel/traverse&quot;).default;// 默认es module导出</span><br><span class="line"></span><br><span class="line">const moduleAnalyser=(filename)=&gt;&#123;</span><br><span class="line">    const content=fs.readFileSync(filename,&quot;utf-8&quot;);// 读取文件内容</span><br><span class="line">    const ast=parser.parse(content,&#123;</span><br><span class="line">        sourceType:&quot;module&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    const dependencies=&#123;&#125;;</span><br><span class="line">    traverse(ast,&#123;</span><br><span class="line">        ImportDeclaration(&#123;node&#125;)&#123;</span><br><span class="line">            const dirname=path.dirname(filename);//filename对应的文件夹路径</span><br><span class="line">            const newFile=&quot;./&quot;+path.join(dirname,node.source.value);</span><br><span class="line">            dependencies[node.source.value]=newFile;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const &#123; code &#125;=babel.transformFromAst(ast,null,&#123;</span><br><span class="line">        presets:[&quot;@babel/preset-env&quot;]</span><br><span class="line">    &#125;)//转换ast</span><br><span class="line">    return &#123;</span><br><span class="line">        filename,</span><br><span class="line">        dependencies,</span><br><span class="line">        code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const makeDependenciesGraph=(entry)=&gt;&#123;</span><br><span class="line">    const entryModule=moduleAnalyser(entry);</span><br><span class="line">    const graphArray=[entryModule];</span><br><span class="line">    for(let i=0;i&lt;graphArray.length;i++)&#123;</span><br><span class="line">        const item=graphArray[i];</span><br><span class="line">        const &#123; dependencies &#125; = item; // 解构出依赖</span><br><span class="line">        if(dependencies)&#123;</span><br><span class="line">            for(let j in dependencies)&#123;</span><br><span class="line">                // 递归分析依赖,放入依赖图谱数组</span><br><span class="line">                graphArray.push(moduleAnalyser(dependencies[j]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 转换为对象 便于使用</span><br><span class="line">    const graph=&#123;&#125;</span><br><span class="line">    graphArray.forEach(item=&gt;&#123;</span><br><span class="line">        graph[item.filename]=&#123;</span><br><span class="line">            dependencies:item.dependencies,</span><br><span class="line">            code:item.code</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const generateCode=(entry)=&gt;&#123;</span><br><span class="line">    const graph=JSON.stringify(makeDependenciesGraph(entry));</span><br><span class="line">    return `</span><br><span class="line">        (function(graph)&#123;</span><br><span class="line">            function require(module)&#123;</span><br><span class="line">                function localRequire(relativePath)&#123;</span><br><span class="line">                    return require(graph[module].dependencies[relativePath])</span><br><span class="line">                &#125;</span><br><span class="line">                var exports=&#123;&#125;;</span><br><span class="line">                (function(require,exports,code)&#123;</span><br><span class="line">                    eval(code)</span><br><span class="line">                &#125;)(localRequire,exports,graph[module].code);</span><br><span class="line">                return exports;</span><br><span class="line">            &#125;;</span><br><span class="line">            require(&apos;$&#123;entry&#125;&apos;);</span><br><span class="line">        &#125;)($&#123;graph&#125;)</span><br><span class="line">    `;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const code=generateCode(&quot;./src/index.js&quot;);// 入口函数</span><br><span class="line">console.log(code);</span><br></pre></td></tr></table></figure><p>以上就是一个webpack代码转换编译的整个过程。继续学习中！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.babeljs.cn/docs/babel-parser" target="_blank" rel="noopener">babel中parser模块文档</a></li><li><a href="https://www.babeljs.cn/docs/babel-core" target="_blank" rel="noopener">babel中core模块文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你知道webpack是如何分析模块各个依赖关系的？是如何将ES6代码编译成浏览器可执行代码的吗？&lt;/p&gt;
&lt;h2 id=&quot;项目初始化&quot;&gt;&lt;a href=&quot;#项目初始化&quot; class=&quot;headerlink&quot; title=&quot;项目初始化&quot;&gt;&lt;/a&gt;项目初始化&lt;/h2&gt;&lt;ul&gt;

      
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>如何使用webpack打包一个库library</title>
    <link href="http://yoursite.com/2019/12/17/learnwebpack1/"/>
    <id>http://yoursite.com/2019/12/17/learnwebpack1/</id>
    <published>2019-12-17T15:16:16.000Z</published>
    <updated>2019-12-17T15:19:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>日常我们开发了一个库之后，如何打包之后提供给别人使用呢？如果你不清楚，就继续看吧！！！</p><h2 id="初始化库"><a href="#初始化库" class="headerlink" title="初始化库"></a>初始化库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir library</span><br><span class="line">cd library</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>经过以上步骤后会生成一个library文件夹，里面包含一个package.json文件。然后简单修改为如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;library&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;./dist/library.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;rocky&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单创建几个文件"><a href="#简单创建几个文件" class="headerlink" title="简单创建几个文件"></a>简单创建几个文件</h2><p>在根目录下新建src文件夹，新建一个math.js和string.js。相关文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// math.js</span><br><span class="line">export function add(a,b)&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function minus(a,b)&#123;</span><br><span class="line">    return a-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function multiply(a,b)&#123;</span><br><span class="line">    return a*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function division(a,b)&#123;</span><br><span class="line">    return a/b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// string.js</span><br><span class="line">export function join(a,b)&#123;</span><br><span class="line">    return a+&quot; &quot;+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续新建一个index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as math from &quot;./math&quot;;</span><br><span class="line">import * as string from &quot;./string&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;math,string&#125;</span><br></pre></td></tr></table></figure><h2 id="简单安装webpack依赖"><a href="#简单安装webpack依赖" class="headerlink" title="简单安装webpack依赖"></a>简单安装webpack依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save</span><br></pre></td></tr></table></figure><p>安装的同时，可以创建webpack配置文件webpack.config.js，如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports=&#123;</span><br><span class="line">    mode:&quot;production&quot;,</span><br><span class="line">    entry:&quot;./src/index.js&quot;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,&quot;dist&quot;),</span><br><span class="line">        filename:&quot;library.js&quot;,</span><br><span class="line">        library:&quot;library&quot;,// 在全局变量中增加一个library变量</span><br><span class="line">        libraryTarget:&quot;umd&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装成功后，执行打包命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>之后会在根目录下生成一个dist文件夹，里面包含一个library.js。</p><h2 id="如何使用呢？"><a href="#如何使用呢？" class="headerlink" title="如何使用呢？"></a>如何使用呢？</h2><p>如果别人要使用这个打包后的library.js的话，可能会有如下几种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// es6方式</span><br><span class="line">import library from &quot;library&quot;</span><br><span class="line"></span><br><span class="line">// commonjs方式</span><br><span class="line">const library=require(&quot;library&quot;)</span><br><span class="line"></span><br><span class="line">// AMD方式</span><br><span class="line">require([&quot;library&quot;],function()&#123;&#125;)</span><br><span class="line"></span><br><span class="line">// script标签引入</span><br><span class="line">&lt;script src=&quot;library.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在dist文件夹里创建一个index.html，用script引入之前打包生成的library.js。浏览器打开index.html,在控制台中输入library,会得到如下所示的结果：<img src="https://user-gold-cdn.xitu.io/2019/12/17/16f144b0f52c0126?w=1612&amp;h=514&amp;f=jpeg&amp;s=97951" alt="result"><br>一个简单的库便打包生成了。<br>注解：webpack中libraryTarget配置项可以设为umd,表示采用umd规范，如果设置为this,表示在this下挂载了一个library变量。更多用法可参考<a href="https://webpack.js.org/configuration/output/#outputlibrarytarget" target="_blank" rel="noopener">webpack官网</a>。</p><h2 id="引入别的库用法"><a href="#引入别的库用法" class="headerlink" title="引入别的库用法"></a>引入别的库用法</h2><p>假设需要引入lodash.安装lodash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash --save</span><br></pre></td></tr></table></figure><p>修改之前创建的string.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import _ from &quot;lodash&quot;;</span><br><span class="line"></span><br><span class="line">export function join(a,b)&#123;</span><br><span class="line">    // return a+&quot; &quot;+b;</span><br><span class="line">    return _.join([a,b],&quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行打包命令，发现打包出来的库体积变大了，因为我们引入了lodash,导致包变大。怎么办呢？修改webpack配置文件。<br>增加一个externals配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path =require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports=&#123;</span><br><span class="line">    mode:&quot;production&quot;,</span><br><span class="line">    entry:&quot;./src/index.js&quot;,</span><br><span class="line">    externals:[&quot;lodash&quot;],// 配置不打包文件</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,&quot;dist&quot;),</span><br><span class="line">        filename:&quot;library.js&quot;,</span><br><span class="line">        library:&quot;library&quot;,</span><br><span class="line">        libraryTarget:&quot;umd&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后打包就会发现库的体积又变小了。</p><p>以上就是一个简单打包库的过程，打包完成后，就可以使用npm相关命令将库发布到npm仓库，发布成功后，就可以让别的小伙伴使用了。当然在实际情况中，打包一个库的话，需要做的还有很多，比如tree-shaking,优化方面的东西，我也正在逐渐学习中！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://webpack.js.org/configuration/output/#outputlibrarytarget" target="_blank" rel="noopener">webpack output libraryTarget</a></li><li><a href="https://webpack.js.org/configuration/externals/#externals" target="_blank" rel="noopener">webpack external</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日常我们开发了一个库之后，如何打包之后提供给别人使用呢？如果你不清楚，就继续看吧！！！&lt;/p&gt;
&lt;h2 id=&quot;初始化库&quot;&gt;&lt;a href=&quot;#初始化库&quot; class=&quot;headerlink&quot; title=&quot;初始化库&quot;&gt;&lt;/a&gt;初始化库&lt;/h2&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue项目整合Eslint和stylelint规范代码</title>
    <link href="http://yoursite.com/2019/09/14/codelint/"/>
    <id>http://yoursite.com/2019/09/14/codelint/</id>
    <published>2019-09-14T02:34:03.000Z</published>
    <updated>2019-09-28T01:47:20.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在搭建项目框架，想着上一个项目代码风格各异，就想着在新项目中引入Eslint来规范团队成员代码风格，保持统一，也方便大家维护代码，减少不必要的错误。前端应用愈加复杂，代码规范问题必须通过强制的方式保持统一。以下是团队逐渐摸索出的一些配置，各取所需。</p><h2 id="Eslint配置"><a href="#Eslint配置" class="headerlink" title="Eslint配置"></a>Eslint配置</h2><p>在用vue-cli3搭建项目的过程中就会问你是否需要Eslint，选择就好来。如果没有选择后期又想加入eslint，可以手动安装Eslint的相关依赖。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint eslint-plugin-vue --save-dev</span><br></pre></td></tr></table></figure><p><strong>需要注意</strong>：Node.js (&gt;=6.14), npm version 3+。</p><h3 id="创建Eslint配置文件"><a href="#创建Eslint配置文件" class="headerlink" title="创建Eslint配置文件"></a>创建Eslint配置文件</h3><p>在项目根目录下新建一个文件，名.eslintrc.js。下面是个人的一些配置，可以自行参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  root: true,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: true,</span><br><span class="line">    node: true,</span><br><span class="line">    es6: true</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [&quot;eslint:recommended&quot;, &quot;plugin:vue/essential&quot;, &quot;@vue/prettier&quot;],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &quot;generator-star-spacing&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,</span><br><span class="line">    &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,</span><br><span class="line">    &quot;vue/no-parsing-error&quot;: [</span><br><span class="line">      2,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;unexpected-solidus-in-tag&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: &quot;babel-eslint&quot;,</span><br><span class="line">    ecmaVersion: 7,</span><br><span class="line">    sourceType: &quot;module&quot;,</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      // 添加ES特性支持，使之能够识别ES6语法</span><br><span class="line">      jsx: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="忽略Eslint校验"><a href="#忽略Eslint校验" class="headerlink" title="忽略Eslint校验"></a>忽略Eslint校验</h3><p>如果一些文件不需要Eslint的校验，可以配置一个.eslintignore，里面写上需要排除的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/build/</span><br><span class="line">/config/</span><br><span class="line">/dist/</span><br><span class="line">/*.js</span><br><span class="line">/test/unit/coverage/</span><br></pre></td></tr></table></figure><h2 id="stylelint配置"><a href="#stylelint配置" class="headerlink" title="stylelint配置"></a>stylelint配置</h2><p>stylelint可以帮助我们规范化css的书写，风格统一，减少错误。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D stylelint stylelint-config-standard stylelint-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录下新建配置文件.stylelintrc.js，相关配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: &quot;stylelint-config-standard&quot;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &quot;color-no-invalid-hex&quot;: true,</span><br><span class="line">    &quot;rule-empty-line-before&quot;: null,</span><br><span class="line">    &quot;color-hex-length&quot;: &quot;long&quot;,</span><br><span class="line">    &quot;color-hex-case&quot;: &quot;lower&quot;,</span><br><span class="line">    &quot;unit-whitelist&quot;: [&quot;em&quot;, &quot;rem&quot;, &quot;%&quot;, &quot;s&quot;, &quot;px&quot;],</span><br><span class="line">    &quot;declaration-colon-newline-after&quot;: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代码美化prettier配置"><a href="#代码美化prettier配置" class="headerlink" title="代码美化prettier配置"></a>代码美化prettier配置</h2><p>虽然借助 Eslint 来提高代码质量，但是却无法保证代码风格统一。一个统一的代码风格对于团队来说是很有价值的，所以为了达到目的，我们使用了 Prettier在保存和提交代码的时候，将代码修改成统一的风格。</p><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D prettier @vue/eslint-config-prettier</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>相关配置写在.eslintrc.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends: [&quot;eslint:recommended&quot;, &quot;plugin:vue/essential&quot;, &quot;@vue/prettier&quot;]</span><br></pre></td></tr></table></figure><p>我使用的是vscode编辑器，同时配置了vscode。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;eslint.autoFixOnSave&quot;: true,</span><br><span class="line">  &quot;eslint.validate&quot;: [</span><br><span class="line">    &quot;javascript&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;language&quot;: &quot;vue&quot;,</span><br><span class="line">      &quot;autoFix&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;html&quot;,</span><br><span class="line">    &quot;vue&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;editor.wordWrap&quot;: &quot;wordWrapColumn&quot;,</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;vetur.validation.template&quot;: false,</span><br><span class="line">  &quot;cSpell.ignoreWords&quot;: [</span><br><span class="line">    &quot;menu&quot;,</span><br><span class="line">    &quot;mixins&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用vscode的同学安装eslint和Prettier - Code formatter这两个插件，配合上面的配置，达到保存的时候自动格式化和校验的目的。</p><h2 id="提交时校验"><a href="#提交时校验" class="headerlink" title="提交时校验"></a>提交时校验</h2><h3 id="安装两个工具"><a href="#安装两个工具" class="headerlink" title="安装两个工具"></a>安装两个工具</h3><ul><li><p>husky：一个方便用来处理 pre-commit 、 pre-push 等 githooks 的工具</p></li><li><p>lint-staged：对 git 暂存区的代码，运行 linters 的工具</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lint-staged husky -D</span><br></pre></td></tr></table></figure><h3 id="package-json增加配置"><a href="#package-json增加配置" class="headerlink" title="package.json增加配置"></a>package.json增加配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;husky&quot;: &#123;</span><br><span class="line">    &quot;hooks&quot;: &#123;</span><br><span class="line">      &quot;pre-commit&quot;: &quot;lint-staged&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;lint-staged&quot;: &#123;</span><br><span class="line">    &quot;src/**/*.&#123;js,jsx,vue&#125;&quot;: [</span><br><span class="line">      &quot;prettier --tab-width 2 --write&quot;,</span><br><span class="line">      &quot;vue-cli-service lint --fix&quot;,</span><br><span class="line">      &quot;git add&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样就可以实现在提交的时候校验，保证错误的代码无法提交。</p><p>到目前为止，项目中就整合进了Eslint校验，prettier美化代码，提交hooks代码检查。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cn.eslint.org/" target="_blank" rel="noopener">Eslint</a></li><li><a href="https://stylelint.io/" target="_blank" rel="noopener">stylelint</a></li><li><a href="https://cloud.tencent.com/developer/section/1489626" target="_blank" rel="noopener">stylelint指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在搭建项目框架，想着上一个项目代码风格各异，就想着在新项目中引入Eslint来规范团队成员代码风格，保持统一，也方便大家维护代码，减少不
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ueditor图片上传方式处理</title>
    <link href="http://yoursite.com/2019/09/13/ueditorupload/"/>
    <id>http://yoursite.com/2019/09/13/ueditorupload/</id>
    <published>2019-09-13T10:59:42.000Z</published>
    <updated>2019-09-28T01:47:20.663Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目里需要用到富文本编辑器，同事选择里百度出的ueditor，但是里面自带的图片上传功能需要后台配合，配置成服务器地址，和我们实际情况不是太符合，于是另想办法，搞定图片上传。</p><h3 id="重写配置项"><a href="#重写配置项" class="headerlink" title="重写配置项"></a>重写配置项</h3><p>首先重写里toolbars配置。最重要的是要把原先的上传图片功能按钮去掉，下面是我用到的配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">toolbars: [</span><br><span class="line">          [</span><br><span class="line">            &quot;fullscreen&quot;,</span><br><span class="line">            &quot;source&quot;,</span><br><span class="line">            &quot;undo&quot;,</span><br><span class="line">            &quot;redo&quot;,</span><br><span class="line">            &quot;bold&quot;,</span><br><span class="line">            &quot;italic&quot;,</span><br><span class="line">            &quot;underline&quot;,</span><br><span class="line">            &quot;fontborder&quot;,</span><br><span class="line">            &quot;strikethrough&quot;,</span><br><span class="line">            &quot;superscript&quot;,</span><br><span class="line">            &quot;subscript&quot;,</span><br><span class="line">            &quot;removeformat&quot;,</span><br><span class="line">            &quot;formatmatch&quot;,</span><br><span class="line">            &quot;autotypeset&quot;,</span><br><span class="line">            &quot;blockquote&quot;,</span><br><span class="line">            &quot;pasteplain&quot;,</span><br><span class="line">            &quot;|&quot;,</span><br><span class="line">            &quot;forecolor&quot;,</span><br><span class="line">            &quot;backcolor&quot;,</span><br><span class="line">            &quot;insertorderedlist&quot;,</span><br><span class="line">            &quot;insertunorderedlist&quot;,</span><br><span class="line">            &quot;selectall&quot;,</span><br><span class="line">            &quot;cleardoc&quot;,</span><br><span class="line">            &quot;mergeright&quot;, //右合并单元格</span><br><span class="line">            &quot;mergedown&quot;, //下合并单元格</span><br><span class="line">            &quot;deleterow&quot;, //删除行</span><br><span class="line">            &quot;deletecol&quot;, //删除列</span><br><span class="line">            &quot;splittorows&quot;, //拆分成行</span><br><span class="line">            &quot;splittocols&quot;, //拆分成列</span><br><span class="line">            &quot;splittocells&quot;, //完全拆分单元格</span><br><span class="line">            &quot;deletecaption&quot;, //删除表格标题</span><br><span class="line">            &quot;inserttitle&quot;, //插入标题</span><br><span class="line">            &quot;mergecells&quot;, //合并多个单元格</span><br><span class="line">            &quot;deletetable&quot;, //删除表格</span><br><span class="line">            &quot;cleardoc&quot;, //清空文档</span><br><span class="line">            &quot;insertparagraphbeforetable&quot;, //&quot;表格前插入行&quot;</span><br><span class="line">            &quot;fontfamily&quot;, //字体</span><br><span class="line">            &quot;fontsize&quot;, //字号</span><br><span class="line">            &quot;paragraph&quot;, //段落格式</span><br><span class="line">            &quot;inserttable&quot;, //插入表格</span><br><span class="line">            &quot;edittable&quot;, //表格属性</span><br><span class="line">            &quot;edittd&quot;, //单元格属性</span><br><span class="line">            &quot;link&quot; //超链接</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>更多配置可参考<a href="http://fex.baidu.com/ueditor/#start-toolbar" target="_blank" rel="noopener">官网</a></p><h3 id="添加初始化方法"><a href="#添加初始化方法" class="headerlink" title="添加初始化方法"></a>添加初始化方法</h3><p>初始化ueditor的时候触发一个方法，因为我的项目是用vue写的，而且封装了一层ueditor,所以就对外暴露了一个beforeInit方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;fw-ueditor-wrap</span><br><span class="line">  v-model=&quot;mainBody&quot;</span><br><span class="line">  :config=&quot;myConfig&quot;</span><br><span class="line">  @beforeInit=&quot;addCustomDialog&quot;</span><br><span class="line">  :key=&quot;1&quot;</span><br><span class="line">&gt;&lt;/fw-ueditor-wrap&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 添加自定义弹窗</span><br><span class="line">    addCustomDialog(editorId) &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      window.UE.registerUI(</span><br><span class="line">        &quot;test-dialog&quot;,</span><br><span class="line">        function(editor, uiName) &#123;</span><br><span class="line">          // 参考http://ueditor.baidu.com/doc/#COMMAND.LIST</span><br><span class="line">          var btn = new window.UE.ui.Button(&#123;</span><br><span class="line">            name: &quot;dialog-button&quot;,</span><br><span class="line">            title: &quot;上传图片&quot;,</span><br><span class="line">            cssRules: `background-image: url(&apos;/image/upload.png&apos;) !important;background-size: cover;`,</span><br><span class="line">            onclick: function() &#123;</span><br><span class="line">              // 渲染dialog</span><br><span class="line">              that.dialogVisible = true;</span><br><span class="line">              editor.execCommand(uiName);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          return btn;</span><br><span class="line">        &#125;,</span><br><span class="line">        100 /* 指定添加到工具栏上的那个位置，默认时追加到最后 */,</span><br><span class="line">        editorId /* 指定这个UI是哪个编辑器实例上的，默认是页面上所有的编辑器都会添加这个按钮 */</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实就是在toolbar工具栏后面又加了一个自定义的按钮，实现上传功能。</p><h3 id="element弹窗设置"><a href="#element弹窗设置" class="headerlink" title="element弹窗设置"></a>element弹窗设置</h3><p>弹窗我用的是element的弹窗，使用方式参考element官网弹窗。并且使用了element的upload上传组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog</span><br><span class="line">      title=&quot;上传图片&quot;</span><br><span class="line">      v-if=&quot;dialogVisible&quot;</span><br><span class="line">      :visible.sync=&quot;dialogVisible&quot;</span><br><span class="line">      width=&quot;30%&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-upload</span><br><span class="line">        class=&quot;upload-demo&quot;</span><br><span class="line">        drag</span><br><span class="line">        accept=&quot;.png, .jpg&quot;</span><br><span class="line">        :headers=&quot;headers&quot;</span><br><span class="line">        :action=&quot;uploadAddr&quot;</span><br><span class="line">        :beforeUpload=&quot;beforeAvatarUpload&quot;</span><br><span class="line">        :on-success=&quot;uploadImageSuccess&quot;</span><br><span class="line">        :on-error=&quot;uploadImageError&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div class=&quot;el-upload__text&quot;&gt;</span><br><span class="line">          将文件拖到此处，或</span><br><span class="line">          &lt;em&gt;点击上传&lt;/em&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;</span><br><span class="line">          只能上传jpg/png文件，且不超过5M</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure></p><p>关键的就是上传成功后需要触发uploadFile方法，将上传成功的图片插入到富文本编辑器中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">uploadFile(file) &#123;</span><br><span class="line">//关键</span><br><span class="line">      let editor = document.querySelector(&quot;.edui-default&quot;).getAttribute(&quot;id&quot;);</span><br><span class="line">      window.UE.getEditor(editor).execCommand(&quot;insertimage&quot;, &#123;</span><br><span class="line">        src: file.url,</span><br><span class="line">        width: &quot;100&quot;,</span><br><span class="line">        height: &quot;100&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">      this.dialogVisible = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    // eslint-disable-next-line no-unused-vars</span><br><span class="line">    uploadImageSuccess(response, file, fileList) &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &quot;上传成功&quot;,</span><br><span class="line">          type: &quot;success&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        let fileObj = &#123;</span><br><span class="line">          name: response.originalName,</span><br><span class="line">          url: response.url</span><br><span class="line">        &#125;;</span><br><span class="line">        // this.fileList.push(fileObj);</span><br><span class="line">        this.uploadFile(fileObj);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">          message: &quot;上传失败&quot;,</span><br><span class="line">          type: &quot;warning&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>大功告成，搞定！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目里需要用到富文本编辑器，同事选择里百度出的ueditor，但是里面自带的图片上传功能需要后台配合，配置成服务器地址，和我们实际情况不是太符合，于是另想办法，搞定图片上传。&lt;/p&gt;
&lt;h3 id=&quot;重写配置项&quot;&gt;&lt;a href=&quot;#重写配置项&quot; class=&quot;head
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化思考</title>
    <link href="http://yoursite.com/2019/08/24/vueCompThinking/"/>
    <id>http://yoursite.com/2019/08/24/vueCompThinking/</id>
    <published>2019-08-24T15:07:52.000Z</published>
    <updated>2019-09-28T01:47:20.665Z</updated>
    
    <content type="html"><![CDATA[<p>项目结束一段时间，写个文章总结下。初入项目组，看到了3000行的vue文件，一口血差点捧出，无奈上一个程序员已经离职，留下的坑，只能自己填上了。在重构项目的过程中，也发现了一些别的问题，组内分享会做了总结分享，这次总结成文章特此记录。</p><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc406aaf9606f2?w=746&amp;h=240&amp;f=png&amp;s=217970" alt=""><br><strong>用搭积木的方式构建vue组件，就如同搭积木一样，构建我们的项目</strong></p><p>在项目中，对于组件的划分，我们一般会划分为业务组件和功能组件，也可以称为视图组件和容器组件。在react中也被称为无状态组件和UI组件。组件划分明确，对于代码的可维护性和阅读性有一定的便利性。划分方式如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc40b0747a42c1?w=1024&amp;h=772&amp;f=png&amp;s=167403" alt=""></p><h2 id="组件设计考量，分而治之"><a href="#组件设计考量，分而治之" class="headerlink" title="组件设计考量，分而治之"></a>组件设计考量，分而治之</h2><p>天下大事，分久必合，合久必分。组件亦然，由以前的写在一起，到如今的明确划分。分而治之的思想，也可以让我们更加专注于主要的功能实现，便于扩展和复用。<br>在组件的设计中，需要考虑以下几点：</p><h3 id="可扩展性强"><a href="#可扩展性强" class="headerlink" title="可扩展性强"></a>可扩展性强</h3><p>扩展性首先是我们要考虑的点，如果不能扩展，就代表着代码写死，失去了代码的灵活性</p><h3 id="组件中方法函数的抽离，便于复用，适用程度高。"><a href="#组件中方法函数的抽离，便于复用，适用程度高。" class="headerlink" title="组件中方法函数的抽离，便于复用，适用程度高。"></a>组件中方法函数的抽离，便于复用，适用程度高。</h3><p>尽可能使用方法定义，避免使用template表达式，不便于复用</p><h3 id="文档清楚详细"><a href="#文档清楚详细" class="headerlink" title="文档清楚详细"></a>文档清楚详细</h3><p>毕竟写的组件是给人用的，不完善的文档让别人如何使用，肯定不能手把手教别人怎么使用吧，所以一个组件详细的使用说明是必须的。</p><h3 id="颗粒度合适，适度抽象"><a href="#颗粒度合适，适度抽象" class="headerlink" title="颗粒度合适，适度抽象"></a>颗粒度合适，适度抽象</h3><p>这个是一个经验的问题，如何衡量颗粒度是否合适，其实是一个度的问题，每个人有每个人的看法，但是尽量保证一个组件完成的功能是单一的，而不是多个功能的结合体。</p><h3 id="功能尽可能单一，代码行数适中"><a href="#功能尽可能单一，代码行数适中" class="headerlink" title="功能尽可能单一，代码行数适中"></a>功能尽可能单一，代码行数适中</h3><p>这一点和上面颗粒度类似，以代码行数衡量也可以，一般的组件如果抽离合适的话，绝对不会超过1000行，如果代码太多，就说明组件划分不合理，抽离不完善，需要重新设计。</p><h3 id="必要的时候需要ui的配合（设计不止于好看，更关乎好用。—乔布斯）"><a href="#必要的时候需要ui的配合（设计不止于好看，更关乎好用。—乔布斯）" class="headerlink" title="必要的时候需要ui的配合（设计不止于好看，更关乎好用。—乔布斯）"></a>必要的时候需要ui的配合（设计不止于好看，更关乎好用。—乔布斯）</h3><p>有的组件设计出来太丑，程序员的眼光和一个专业的设计师的眼光还是有一定差距的，所以如果可以的话可以请专业的设计师设计以下ui界面，在一定程度上可以吸引到别人。</p><h2 id="组件设计参考点"><a href="#组件设计参考点" class="headerlink" title="组件设计参考点"></a>组件设计参考点</h2><h3 id="组件间props原子化"><a href="#组件间props原子化" class="headerlink" title="组件间props原子化"></a>组件间props原子化</h3><p>父子组件通过 props 属性传值时，尽可能的规定数据类型并且使用原始类型的数据。尽量只使用 JavaScript 原始类型（字符串、数字、布尔值）和函数。尽量避免复杂的对象。</p><p>有以下几点注意：</p><ul><li><p>保证组件API清晰直观</p></li><li><p>更好的理解每一个prop的含义和作用</p></li><li><p>传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。</p></li><li><p>保证组件可用（防御性编程）</p></li></ul><p>示例：</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc41b224a7034f?w=571&amp;h=394&amp;f=png&amp;s=106192" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc41b3f08b3b63?w=332&amp;h=441&amp;f=png&amp;s=73208" alt=""></p><h3 id="巧妙利用slot扩展组件"><a href="#巧妙利用slot扩展组件" class="headerlink" title="巧妙利用slot扩展组件"></a>巧妙利用slot扩展组件</h3><p>用好slot可以设计出很多优秀的组件。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc41bcf295589d?w=852&amp;h=630&amp;f=png&amp;s=171978" alt=""></p><h3 id="合理使用mixin实现复用"><a href="#合理使用mixin实现复用" class="headerlink" title="合理使用mixin实现复用"></a>合理使用mixin实现复用</h3><p>Mixins封装可重用的代码，避免重复。如果多个组件共享相同功能，则可以使用mixin。通过mixin，可以专注于单个组件的任务和抽象的通用代码。这有助于更好地维护应用程序。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc41ce329f3237?w=620&amp;h=338&amp;f=png&amp;s=95649" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc41cfbf8c25fe?w=571&amp;h=341&amp;f=png&amp;s=95722" alt=""></p><h3 id="及时模块化"><a href="#及时模块化" class="headerlink" title="及时模块化"></a>及时模块化</h3><p>在决定抽离成组件之前，先问一下自己下面几个问题：</p><ul><li><p>是否有足够的页面结构/逻辑来保证它？</p></li><li><p>代码重复（或可能重复）？</p></li><li><p>它会减少需要书写的模板吗？</p></li><li><p>性能会收到影响吗？</p></li><li><p>你是否会在测试代码的所有部分时遇到问题？</p></li><li><p>你是否有一个明确的理由？</p></li><li><p>这些好处是否超过了成本？<br>当你明确了上面几个问题后，是否抽离组件相信你已经有了明确的答案。</p></li></ul><p>如何设计组件？何时抽离组件？如何抽离一个合适的组件？都是一些设计原则加上实际经验相互作用下作出的判断，理论指导，实践判断。<br><img src="https://user-gold-cdn.xitu.io/2019/8/24/16cc420c94127fcd?w=2048&amp;h=1160&amp;f=png&amp;s=2719163" alt=""></p><p>最后用一段鸡汤文结尾：  </p><p>在一天结束时，虽然你的直接责任可能是“编写代码”，但你不应忽视你的最终目标，即建立一些东西。创建产品。为了产生一些你可以引以为豪的东西并帮助别人，即使它在技术上并不完美，永远记得找到一个平衡点。不幸的是，在一周内每天 8 小时盯着眼前的代码会使得眼界和角度变得更为“狭窄”，这个时候你需要的你是退后一步，确保你不要为了一颗树而失去整个森林。</p><p>感谢各位大佬的阅读，谢谢！🙏🙏🙏</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目结束一段时间，写个文章总结下。初入项目组，看到了3000行的vue文件，一口血差点捧出，无奈上一个程序员已经离职，留下的坑，只能自己填上了。在重构项目的过程中，也发现了一些别的问题，组内分享会做了总结分享，这次总结成文章特此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用React构建精简版本掘金（五）</title>
    <link href="http://yoursite.com/2019/04/30/react-juejin5/"/>
    <id>http://yoursite.com/2019/04/30/react-juejin5/</id>
    <published>2019-04-30T13:25:18.000Z</published>
    <updated>2019-09-28T01:47:20.661Z</updated>
    
    <content type="html"><![CDATA[<p>距离上篇文章已经过去了大半个月，本来打算只更新代码，最后还是决定把做的过程中遇到的问题记录出来，说不定就可以帮助一些同学，也算是幸事，如果没有，那就当作自己梳理知识点吧！ </p><p>该篇文章主要讲述以下知识点：</p><ul><li>如何mock数据</li><li>React组件中修改Redux中的数据</li></ul><h1 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h1><p>有三种方式：</p><ul><li>利用node搭服务，mock数据</li><li>利用现成网上mock服务，比如<a href="https://www.easy-mock.com/login" target="_blank" rel="noopener">easy mock</a></li><li>本地json数据模拟请求</li></ul><p>介绍下本地数据模拟请求，利用axios请求数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"></span><br><span class="line">const BaseUrl=&apos;./mock/homeData/&apos;;</span><br><span class="line">const getHome=()=&gt;&#123;</span><br><span class="line">    return axios.get(BaseUrl+&apos;home.json&apos;).then(res=&gt;&#123;</span><br><span class="line">        return res.data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const getArticleList=()=&gt;&#123;</span><br><span class="line">    return axios.get(BaseUrl+&apos;articleList.json&apos;).then(res=&gt;&#123;</span><br><span class="line">        return res.data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; getHome,getArticleList &#125;</span><br></pre></td></tr></table></figure><p>本地json数据存放位置如下<br><img src="https://user-gold-cdn.xitu.io/2019/4/30/16a6e5b54df5f8d1?w=672&amp;h=632&amp;f=png&amp;s=61735" alt=""></p><h1 id="React组件中修改Redux中的数据"><a href="#React组件中修改Redux中的数据" class="headerlink" title="React组件中修改Redux中的数据"></a>React组件中修改Redux中的数据</h1><p>定义好state，reducer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//userReducer.js</span><br><span class="line"></span><br><span class="line">// 1.定义默认数据</span><br><span class="line">let initialState = &#123;</span><br><span class="line">    userId:&apos;&apos;,</span><br><span class="line">    userName:&apos;&apos;,//实际项目与此不同</span><br><span class="line">    userImage: &apos;&apos;,</span><br><span class="line">    userDesc:&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// action creators</span><br><span class="line">export const actions = &#123;</span><br><span class="line">    login: (userInfo) =&gt; &#123;</span><br><span class="line">        return &#123;type: &apos;CHANGE_USER&apos;,userName: userInfo.username,userId:userInfo.userId&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    logout:()=&gt;&#123;</span><br><span class="line">        return &#123;type:&apos;LOGOUT&apos;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 2.Reducer</span><br><span class="line">const userReducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;CHANGE_USERIMAGE&apos;:</span><br><span class="line">            return &#123; ...state, userImage: action.userImage &#125;</span><br><span class="line">        case &apos;CHANGE_USERID&apos;:</span><br><span class="line">            return &#123; ...state,userId:action.userId&#125;</span><br><span class="line">        case &apos;CHANGE_USER&apos;:</span><br><span class="line">            return &#123; ...state,userName:action.userName,userId:action.userId&#125;</span><br><span class="line">        case &apos;LOGOUT&apos;:</span><br><span class="line">            return &#123;...state,userName:&apos;&apos;,userId:&apos;&apos;&#125;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 3.导出</span><br><span class="line">export default userReducer;</span><br></pre></td></tr></table></figure></p><p>在组件中操作修改state</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">this.props.login(&#123;username:username,userId:userId&#125;);//修改存储在redux中的用户信息</span><br><span class="line">...</span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; &#123;</span><br><span class="line">  return bindActionCreators(&#123;</span><br><span class="line">    login: authActions.login</span><br><span class="line">  &#125;,dispatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Login=connect(mapStateToProps,mapDispatchToProps)(Login)</span><br><span class="line"></span><br><span class="line">export default Login;</span><br></pre></td></tr></table></figure><p>Redux通过reducer解析action。reducer是一个普通的js函数，接受action作为参数，然后返回一个新的state。</p><p><strong>三大原则</strong></p><ul><li>唯一数据源</li><li>保持state状态只读</li><li>state的改变必须通过纯函数完成</li></ul><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux应用只维护一个全局的状态对象，存在Redux的store中。程序任何时候都不能直接去修改状态state，如果需要修改state，必须发送一个action，通过action去描述如何修改state。action描述了改变state的意图，真正对state作出修改的是reducer。reducer必须是<strong>纯函数</strong>，所以reducer在收到action后，不能直接去修改原来的状态state，而是应该创建一个新的状态对象返回。  </p><blockquote><p>纯函数需要满足两个条件：<br>（1）对于同样的参数值，函数返回结果总是相同的，就是函数结果不依赖任何在程序执行过程中可能改变的变量。<br>（2）函数的执行过程不会产生比的副作用，例如会修改外部对象，有时会去修改页面标题，这就是副作用。</p></blockquote><p>数据流向的一个简单示意图，来自<a href="https://facebook.github.io/flux/docs/in-depth-overview.html#content" target="_blank" rel="noopener">Flux官网</a><br><img src="https://user-gold-cdn.xitu.io/2019/4/30/16a6b751c735f491?w=1300&amp;h=393&amp;f=png&amp;s=39726" alt=""></p><p>可以看出Redux应用的主要组成有action，reducer和store。</p><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>action是Redux中的信息载体，是store的唯一来源。把action发给store必须通过store中的dispach方法。其实action就是一个普通的js对象，但是每个action必须有一个type属性用来描述action类型，要做什么操作。除了type属性歪，action的结构完全由你决定，不过应该保证可以清晰描述使用场景。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function logout(info)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        type:&apos;LOGOUT&apos;,</span><br><span class="line">        info</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>reducer根据action做出响应，决定如何修改应用状态state。其实在写reducer之前就应该设计好state。</p><p>state：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 1.定义默认数据</span><br><span class="line">let initialState = &#123;</span><br><span class="line">    userId:&apos;&apos;,</span><br><span class="line">    userName:&apos;&apos;,//实际项目与此不同</span><br><span class="line">    userImage: &apos;&apos;,</span><br><span class="line">    userDesc:&apos;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reducer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 2.Reducer</span><br><span class="line">const userReducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;CHANGE_USERIMAGE&apos;:</span><br><span class="line">            return &#123; ...state, userImage: action.userImage &#125;</span><br><span class="line">        case &apos;CHANGE_USERID&apos;:</span><br><span class="line">            return &#123; ...state,userId:action.userId&#125;</span><br><span class="line">        case &apos;CHANGE_USER&apos;:</span><br><span class="line">            return &#123; ...state,userName:action.userName,userId:action.userId&#125;</span><br><span class="line">        case &apos;LOGOUT&apos;:</span><br><span class="line">            return &#123;...state,userName:&apos;&apos;,userId:&apos;&apos;&#125;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用了ES6的扩展运算符（…）创建新的state对象，避免直接修改之前的state对象。</p></blockquote><p>在实际项目中，可能会有很多reducer，就需要把reducer拆分保存在单独的文件中。Redux提供了一个combineReducers函数，用来合并reducer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123;combineReducers&#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">import pageHeaderReducer from &apos;./pageHeader.js&apos;;</span><br><span class="line">import userReducer from &apos;./userReducer&apos;;</span><br><span class="line"></span><br><span class="line">const appReducer = combineReducers(&#123;</span><br><span class="line">    pageHeaderReducer,</span><br><span class="line">    userReducer,</span><br><span class="line">&#125;);</span><br><span class="line">export default appReducer;</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>store是Redux中的一个对象，作为action和reducer之间的一个桥梁。<br>作用：</p><ul><li>保存应用状态</li><li>通过方法获取应用状态</li><li>通过dispatch(action)发送更新状态的指令</li><li>通过方法subscribe(listener)注册监听函数、监听状态的改变。</li></ul><p>总结下Redux中的数据流过程：</p><ul><li>（1）通过调用store.dispatch(action)。一个action描述了“发生了什么”的对象以及可能会携带一些参数。store.dispatch(action)可以在应用中任何位置调用。</li><li>（2）Redux的store调用reducer函数。store传递两个参数给reducer，分别是当前应用的状态和action，reducer必须是纯函数。</li><li>（3）根reducer可以把多个子reducer合并在一起，返回组成最终的应用状态。利用combineReducers进行组合。</li><li>（4）Redux的store保存根reducer返回的完整应用状态，这整个流程走完，应用状态才完成更新。</li></ul><h2 id="在React中使用Redux"><a href="#在React中使用Redux" class="headerlink" title="在React中使用Redux"></a>在React中使用Redux</h2><p>基础安装使用方法已经在<a href="https://rocky-191.github.io/2019/03/19/react-juejin/" target="_blank" rel="noopener">第一篇</a>中做了介绍，此处重点介绍下connect中的mapStateToProps和mapDispatchToProps。</p><h3 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps"></a>mapStateToProps</h3><p>mapStateToProps是一个函数，从名字上看，该函数作用就是把state转换成props。state就是Redux store中保存的应用状态，会作为参数传递给mapStateToProps，props就是被连接展示组件的props。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        userName:state.userReducer.userName,</span><br><span class="line">        userImage:state.userReducer.userImage,</span><br><span class="line">        userId:state.userReducer.userId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当store中的state改变后，mapStateToProps就会重新执行，重新计算传递给展示组件的props，从而触发组件的重新渲染。</p><blockquote><p><strong>注意</strong>：store中的state改变一定会导致mapStateToProps重新执行，但却不一定会触发组件渲染render方法重新执行。如果mapStateToProps新返回的对象和之前的对象浅比较相等，组件的shouldComponentUpdate方法就会返回false，组件的render方法就不会被再次触发，这也是一个重要优化吧！</p></blockquote><h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps"></a>mapDispatchToProps</h3><p>mapDispatchToProps接收store.dispatch方法作为参数，返回展示组件用来修改state的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      getOrder: (data) =&gt; dispatch(actionCreator(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种写法，利用bindActionCreators</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; bindActionCreators &#125; from &quot;redux&quot;;</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; &#123;</span><br><span class="line">  return bindActionCreators(&#123;</span><br><span class="line">    getOrder: actionCreator.getOrder</span><br><span class="line">  &#125;,dispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bindActionCreators作用是将单个或多个ActionCreator转化为dispatch(action)的函数集合形式。个人感觉会内部自动注入dispatch，不用我们手动去dispatch。之后通过connect连接即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (state, ownProps) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; &#123;</span><br><span class="line">  return bindActionCreators(&#123;</span><br><span class="line">    login: authActions.login</span><br><span class="line">  &#125;,dispatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Login=connect(mapStateToProps,mapDispatchToProps)(Login)</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>connect函数参数必须第一个为mapStateToProps，第二个必须为mapDispatchToProps，可以不写mapDispatchToProps，但是如果需要mapDispatchToProps却不能不写mapStateToProps，否则会报错，个人第一次使用就犯了这个错误😓</p></blockquote><p>啰哩啰嗦的说了这么多，码字不易，点赞再走哈。完整项目代码在<a href="https://github.com/rocky-191/react-juejin" target="_blank" rel="noopener">github</a>,欢迎点个star，不胜感激👏👏👏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;距离上篇文章已经过去了大半个月，本来打算只更新代码，最后还是决定把做的过程中遇到的问题记录出来，说不定就可以帮助一些同学，也算是幸事，如果没有，那就当作自己梳理知识点吧！ &lt;/p&gt;
&lt;p&gt;该篇文章主要讲述以下知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何mock数据&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>使用React构建精简版本掘金（四）</title>
    <link href="http://yoursite.com/2019/04/03/react-juejin4/"/>
    <id>http://yoursite.com/2019/04/03/react-juejin4/</id>
    <published>2019-04-03T11:33:30.000Z</published>
    <updated>2019-09-28T01:47:20.661Z</updated>
    
    <content type="html"><![CDATA[<p>到目前为止，首页、文章详情页、动态页、话题页及小册页面内容完成了，看一下效果图哈，数据不全，见谅哈！</p><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2019/4/3/169e244fd9cfe8e9?w=1909&amp;h=898&amp;f=gif&amp;s=1444510" alt=""></p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="动态页"><a href="#动态页" class="headerlink" title="动态页"></a>动态页</h2><p>该页面从布局来说分左右两部分，左边有分为输入框和已发表内容部分。  </p><ul><li>输入框部分</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/4/3/169e24face2af6b6?w=766&amp;h=201&amp;f=png&amp;s=13507" alt=""><br>我这里采用了ant-design中的input作为输入框，而掘金是采用了可编辑的div来实现输入内容,通过设置contenteditable=”true”实现，感兴趣的小伙伴可查阅相关资料。<br>发布按钮的disabled状态将根据输入框是否有值来决定。功能类似todolist添加功能，可参考文章详情页面的发布评论功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;background:&apos;#fff&apos;,padding:&apos;15px&apos;,position:&apos;relative&apos;&#125;&#125;&gt;</span><br><span class="line">    &lt;TextArea placeholder=&quot;告诉你个小秘密，发沸点时添加话题会被更多小伙伴看见呦~&quot; style=&#123;&#123;paddingBottom:&apos;30px&apos;&#125;&#125; autosize=&#123;&#123; minRows: 3&#125;&#125; onChange=&#123;this.handelInputChange.bind(this)&#125;/&gt;</span><br><span class="line">    &#123;this.state.selectedTopic!==&apos;&apos;?&lt;span style=&#123;&#123;position:&apos;absolute&apos;,bottom:&apos;60px&apos;,left:&apos;28px&apos;,padding:&apos;0 12px&apos;,border:&apos;1px solid #007fff&apos;,userSelect:&apos;none&apos;,height:&apos;22px&apos;,borderRadius:&apos;14px&apos;,color:&apos;#007fff&apos;&#125;&#125;&gt;&#123;this.state.selectedTopic&#125;&lt;/span&gt;:&apos;&apos;&#125;</span><br><span class="line">    &lt;div style=&#123;&#123;marginTop:&apos;5px&apos;,display:&apos;flex&apos;,justifyContent:&apos;space-between&apos;&#125;&#125;&gt;</span><br><span class="line">        &lt;ul style=&#123;sy1&#125;&gt;</span><br><span class="line">            &lt;li style=&#123;sy2&#125; onClick=&#123;this.handleBtn.bind(this,&apos;exp&apos;)&#125;&gt;</span><br><span class="line">                &lt;img alt=&apos;&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/emoji.5594dbb.svg&apos; /&gt;表情</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li style=&#123;sy2&#125; onClick=&#123;this.handleBtn.bind(this,&apos;pic&apos;)&#125;&gt;</span><br><span class="line">                &lt;img alt=&apos;&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/active_file.d265f4e.svg&apos; /&gt;图片</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li style=&#123;sy2&#125; onClick=&#123;this.handleBtn.bind(this,&apos;link&apos;)&#125;&gt;</span><br><span class="line">                &lt;img alt=&apos;&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/active_link.b1a6832.svg&apos; /&gt;链接</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;Popover placement=&quot;bottom&quot; content=&#123;&lt;TopicList handleTopic=&#123;this.handleTopic.bind(this)&#125; /&gt;&#125; trigger=&quot;click&quot;&gt;</span><br><span class="line">                &lt;li style=&#123;sy2&#125; onClick=&#123;this.handleBtn.bind(this,&apos;topic&apos;)&#125;&gt;</span><br><span class="line">                    &lt;img alt=&apos;&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/topic.6a87bb7.svg&apos; /&gt;话题</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/Popover&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;Button type=&quot;primary&quot; disabled=&#123;this.state.disabledBtn&#125; onClick=&#123;this.handlePressEnter.bind(this)&#125;&gt;发布&lt;/Button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>输入框内容发生变化事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">handelInputChange=(e)=&gt;&#123;</span><br><span class="line">    if(e.target.value.trim()!==&apos;&apos;)&#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            disabledBtn:false,</span><br><span class="line">            inputValue:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            disabledBtn:true</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布按钮事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handlePressEnter=()=&gt;&#123;</span><br><span class="line">    if(this.state.inputValue!==&apos;&apos;)&#123;</span><br><span class="line">        console.log(&apos;发布沸点&apos;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        message.error(&apos;请输入沸点内容&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加话题</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/4/3/169e2683b3cbf40b?w=1080&amp;h=693&amp;f=gif&amp;s=329742" alt=""><br>如图所示，一个搜索框加一个话题列表。<br>dom结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;background:&apos;#fff&apos;&#125;&#125;&gt;</span><br><span class="line">    &lt;Search</span><br><span class="line">        placeholder=&quot;搜索话题&quot;</span><br><span class="line">        onSearch=&#123;value =&gt; this.handleSearch(value)&#125;</span><br><span class="line">        style=&#123;&#123; width: &apos;100%&apos; &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;List</span><br><span class="line">        itemLayout=&quot;horizontal&quot;</span><br><span class="line">        dataSource=&#123;this.state.topicListData&#125;</span><br><span class="line">        style=&#123;&#123;height:&apos;300px&apos;,overflow:&apos;auto&apos;&#125;&#125;</span><br><span class="line">        renderItem=&#123;item =&gt; (</span><br><span class="line">        &lt;List.Item style=&#123;&#123;cursor:&apos;pointer&apos;&#125;&#125; onClick=&#123;this.handleClick.bind(this,item.title)&#125;&gt;</span><br><span class="line">            &lt;List.Item.Meta</span><br><span class="line">            avatar=&#123;&lt;Avatar size=&#123;42&#125; shape=&quot;square&quot; src=&#123;item.img&#125; /&gt;&#125;</span><br><span class="line">            title=&#123;item.title&#125;</span><br><span class="line">            description=&#123;&lt;div&gt;&#123;item.followers&#125;关注 &#123;item.num&#125;沸点&lt;/div&gt;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/List.Item&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>搜索框回车搜索事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">handleSearch=(value)=&gt;&#123;</span><br><span class="line">    const list=[...this.state.storeListData];</span><br><span class="line">    if(value!==&apos;&apos;)&#123;</span><br><span class="line">        const searchList=list.filter(item=&gt;item.title.indexOf(value)&gt;-1);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            topicListData:searchList</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            topicListData:list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>话题列表点击事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick=(val)=&gt;&#123;</span><br><span class="line">    this.props.handleTopic(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里向父组件传递了一个val代表当前点击话题，关于父子组件传值的相关说明前面文章做了介绍，这里不再赘述。</p><ul><li>已发表的话题列表<br>使用ant-design的list组件实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    const IconText = (&#123; type, text,tag &#125;) =&gt; (</span><br><span class="line">        &lt;span onClick=&#123;this.handleClick.bind(this,tag)&#125;&gt;</span><br><span class="line">            &lt;Icon type=&#123;type&#125; style=&#123;&#123; marginRight: 8 &#125;&#125; /&gt;</span><br><span class="line">            &#123;text&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    );</span><br><span class="line">    const PopoverContent=(id)=&gt;&#123;</span><br><span class="line">        return &lt;p style=&#123;&#123;cursor:&apos;pointer&apos;&#125;&#125; onClick=&#123;this.handleReport.bind(this,id)&#125;&gt;举报&lt;/p&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;List</span><br><span class="line">                itemLayout=&quot;vertical&quot;</span><br><span class="line">                size=&quot;large&quot;</span><br><span class="line">                dataSource=&#123;this.state.listData&#125;</span><br><span class="line">                renderItem=&#123;item =&gt; (</span><br><span class="line">                &lt;List.Item</span><br><span class="line">                    key=&#123;item.author&#125;</span><br><span class="line">                    actions=&#123;</span><br><span class="line">                        [</span><br><span class="line">                            &lt;IconText type=&quot;like&quot; text=&#123;item.likeNum===0?&apos;赞&apos;:item.likeNum&#125; tag=&apos;like&apos; /&gt;,</span><br><span class="line">                            &lt;IconText type=&quot;message&quot; text=&#123;item.commentNum===0?&apos;评论&apos;:item.commentNum&#125; tag=&apos;comment&apos; /&gt;,</span><br><span class="line">                            &lt;IconText type=&quot;share-alt&quot; text=&quot;分享&quot; tag=&apos;share&apos; /&gt;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                    extra=&#123;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &#123;!item.isFollowed &amp;&amp; &lt;Button style=&#123;&#123;borderColor:&apos;#6cbd45&apos;,color:&apos;#6cbd45&apos;&#125;&#125; onClick=&#123;()=&gt;this.handleFollow(item.id)&#125;&gt;&#123;item.isFollowed?&apos;已关注&apos;:&apos;关注&apos;&#125;&lt;/Button&gt;&#125;</span><br><span class="line">                            &lt;Popover placement=&quot;bottom&quot; content=&#123;&lt;PopoverContent author=&#123;item.author&#125; /&gt;&#125; trigger=&quot;click&quot;&gt;</span><br><span class="line">                                &lt;span style=&#123;&#123;cursor:&apos;pointer&apos;,margin:&apos;10px&apos;&#125;&#125;&gt;...&lt;/span&gt;</span><br><span class="line">                            &lt;/Popover&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;List.Item.Meta</span><br><span class="line">                    // avatar=&#123;&lt;Avatar size=&#123;45&#125; src=&#123;item.avatar&#125; /&gt;&#125;</span><br><span class="line">                    avatar=&#123;&lt;Popover placement=&quot;top&quot; content=&#123;&lt;PersonalPop info=&#123;item&#125; handleFollow=&#123;(id)=&gt;this.handleFollow(id)&#125; /&gt;&#125;&gt;</span><br><span class="line">                                &lt;Avatar size=&#123;45&#125; src=&#123;item.avatar&#125; /&gt;</span><br><span class="line">                            &lt;/Popover&gt;&#125;</span><br><span class="line">                    title=&#123;&lt;Popover placement=&quot;top&quot; content=&#123;&lt;PersonalPop info=&#123;item&#125; handleFollow=&#123;(id)=&gt;this.handleFollow(id)&#125; /&gt;&#125;&gt;</span><br><span class="line">                                &lt;span style=&#123;&#123;cursor:&apos;pointer&apos;&#125;&#125;&gt;&#123;item.author&#125;&lt;/span&gt;</span><br><span class="line">                            &lt;/Popover&gt;&#125;</span><br><span class="line">                    description=&#123;&lt;div&gt;&lt;span&gt;&#123;item.description&#125;&lt;/span&gt;&lt;span style=&#123;&#123;margin:&apos;0 5px&apos;&#125;&#125;&gt;·&lt;/span&gt;&lt;span&gt;&#123;timeUtil.getTimeAgo(item.editTime)&#125;&lt;/span&gt;&lt;/div&gt;&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    &#123;item.content&#125;</span><br><span class="line">                &lt;/List.Item&gt;</span><br><span class="line">                )&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>用户头像鼠标滑过会出现详情，使用了popover组件，具体内容是单独抽离的一个PersonalPop组件。每一项根据isFollowed值判断是否显示关注按钮，如果没有关注，点击可关注。</p><ul><li>右侧内容<br>右侧内容统一使用card组件实现，利用Redux获取登录用户信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    const &#123; Meta &#125; = Card;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&apos;dynamicSide&apos;&gt;</span><br><span class="line">            &lt;Card style=&#123;&#123; width: &apos;100%&apos; &#125;&#125; className=&apos;card1&apos;&gt;</span><br><span class="line">                &lt;Meta</span><br><span class="line">                    avatar=&#123;&lt;Avatar size=&#123;62&#125; src=&#123;this.props.userImage&#125; /&gt;&#125;</span><br><span class="line">                    title=&#123;this.props.userId&#125;</span><br><span class="line">                    description=&#123;this.props.userDesc&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;</span><br><span class="line">                            &lt;p className=&apos;liTitle&apos;&gt;沸点&lt;/p&gt;</span><br><span class="line">                            &lt;p className=&apos;liNum&apos;&gt;&#123;this.state.userInfo.topNum&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;</span><br><span class="line">                            &lt;p className=&apos;liTitle&apos;&gt;关注&lt;/p&gt;</span><br><span class="line">                            &lt;p className=&apos;liNum&apos;&gt;&#123;this.state.userInfo.following&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;</span><br><span class="line">                            &lt;p className=&apos;liTitle&apos;&gt;关注者&lt;/p&gt;</span><br><span class="line">                            &lt;p className=&apos;liNum&apos;&gt;&#123;this.state.userInfo.follower&#125;&lt;/p&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/Card&gt;</span><br><span class="line">            &lt;Card</span><br><span class="line">                title=&quot;你可能感兴趣的人&quot;</span><br><span class="line">                style=&#123;&#123; width: &apos;100%&apos; ,marginTop:&apos;10px&apos;&#125;&#125;</span><br><span class="line">                className=&apos;card2&apos;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    itemLayout=&quot;horizontal&quot;</span><br><span class="line">                    dataSource=&#123;this.state.interestList&#125;</span><br><span class="line">                    renderItem=&#123;item =&gt; (</span><br><span class="line">                    &lt;List.Item actions=&#123;[&lt;Button&gt;关注&lt;/Button&gt;]&#125;&gt;</span><br><span class="line">                        &lt;List.Item.Meta</span><br><span class="line">                            avatar=&#123;&lt;Avatar size=&#123;40&#125; src=&#123;item.userImage&#125; /&gt;&#125;</span><br><span class="line">                            title=&#123;item.user&#125;</span><br><span class="line">                            description=&#123;item.desc&#125;</span><br><span class="line">                        /&gt;</span><br><span class="line">                    &lt;/List.Item&gt;</span><br><span class="line">                    )&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;div className=&apos;user-recommend-footer&apos; onClick=&#123;this.changeInterestList.bind(this)&#125;&gt;</span><br><span class="line">                    &lt;Icon type=&quot;sync&quot; /&gt;换一批</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/Card&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;marginTop:&apos;10px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;TopicCard title=&apos;关注的话题&apos; link=&apos;/topics&apos; list=&#123;this.state.attentionTopic&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;marginTop:&apos;10px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;TopicCard title=&apos;更多话题&apos; link=&apos;/topics&apos; list=&#123;this.state.allTopic&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鉴于关注的话题和更多话题内容结构类似，故抽离为一个公用组件，且为函数式组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function TopicCard(&#123; title,list,link &#125;)&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Card</span><br><span class="line">            title=&#123;title&#125;</span><br><span class="line">            extra=&#123;&lt;a href=&#123;link&#125; style=&#123;&#123;color:&apos;#007fff&apos;&#125;&#125;&gt;全部&gt;&lt;/a&gt;&#125;</span><br><span class="line">            style=&#123;&#123; width: &apos;100%&apos; &#125;&#125;</span><br><span class="line">            className=&apos;topicCard&apos;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;List</span><br><span class="line">                itemLayout=&quot;horizontal&quot;</span><br><span class="line">                dataSource=&#123;list&#125;</span><br><span class="line">                renderItem=&#123;item =&gt; (</span><br><span class="line">                &lt;List.Item&gt;</span><br><span class="line">                    &lt;List.Item.Meta</span><br><span class="line">                        avatar=&#123;&lt;Avatar shape=&quot;square&quot; size=&#123;40&#125; src=&#123;item.userImage&#125; /&gt;&#125;</span><br><span class="line">                        title=&#123;item.title&#125;</span><br><span class="line">                        description=&#123;&lt;div style=&#123;&#123;color:&apos;#8a9aa9&apos;&#125;&#125;&gt;&lt;span&gt;&#123;item.followNum&#125;关注&lt;/span&gt;·&lt;span&gt;&#123;item.hotNews&#125;沸点&lt;/span&gt;&lt;/div&gt;&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/List.Item&gt;</span><br><span class="line">                )&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/Card&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React组件可分为函数组件(Functional Component )和类组件(Class Component)，划分依据是根据组件的定义方式。函数组件使用函数定义组件，类组件使用ES6 class定义组件。  </p></blockquote><p>函数组件的写法要比类组件简洁，不过类组件比函数组件功能更强大。类组件可以维护自身的状态变量，即组件的state，类组件还有不同的生命周期方法，可以让我们能够在组件的不同阶段（挂载、更新、卸载）对组件做更多的控制，进行不同的操作。但函数组件的使用可以从思想上让你在设计组件时进行更多思考，更加关注逻辑控制和显示的分离，设计出更加合理的组件结构。实际操作中，当一个组件不需要管理自身状态时，可以把它设计成函数组件，当你有足够的理由发现它需要“升级”为类组件时，再把它改造为类组件。因为函数组件“升级”为类组件是有一定成本的，这样就会要求你做这个改造前更认真地思考其合理性，而不是仅仅为了一时的方便就使用类组件。</p><h2 id="话题页"><a href="#话题页" class="headerlink" title="话题页"></a>话题页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/4/3/169e286e44164261?w=1043&amp;h=712&amp;f=png&amp;s=157895" alt=""><br>同样适用函数式组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function TopicItem(&#123;item,showCount&#125;)&#123;</span><br><span class="line">    const &#123;id,topicName,topicImage,topicCount,followedNum,topicNum,isFollowed&#125;=item;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&apos;topicItem&apos;&gt;</span><br><span class="line">            &lt;Badge count=&#123;showCount?topicCount:0&#125; overflowCount=&#123;999&#125;&gt;</span><br><span class="line">                &lt;Avatar shape=&quot;square&quot; size=&#123;72&#125; src=&#123;topicImage&#125; /&gt;</span><br><span class="line">            &lt;/Badge&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;marginLeft:&apos;15px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;NavLink to=&#123;`/topic/$&#123;id&#125;`&#125;&gt;&#123;topicName&#125;&lt;/NavLink&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div style=&#123;&#123;color:&apos;#8a9aa9&apos;,marginTop:&apos;5px&apos;&#125;&#125;&gt;</span><br><span class="line">                    &lt;span&gt;&#123;followedNum&#125;关注&lt;/span&gt;·</span><br><span class="line">                    &lt;span&gt;&#123;topicNum&#125;沸点&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&#123;isFollowed?&apos;hasFollowed&apos;:&apos;noFollow&apos;&#125;&gt;</span><br><span class="line">                    &#123;isFollowed?&apos;已关注&apos;:&apos;+关注&apos;&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注的话题数据其实是全部话题的子集，在父页面调用的时候根据数据中的isFollowed属性进行一次筛选。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    const list=[...this.state.allTopicList];</span><br><span class="line">    const followedTopicList=list.filter(item=&gt;item.isFollowed);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        followedTopic:[...followedTopicList]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小册页"><a href="#小册页" class="headerlink" title="小册页"></a>小册页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/4/3/169e28b8116fa193?w=1061&amp;h=587&amp;f=png&amp;s=119560" alt=""></p><ul><li>头部的导航</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function TopNav(&#123;tags,changeLink&#125;)&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;tags.map((item,index)=&gt;&#123;</span><br><span class="line">                return &lt;li key=&#123;item.path&#125; onClick=&#123;()=&gt;changeLink(item.path)&#125;&gt;</span><br><span class="line">                    &lt;NavLink to=&#123;`/books$&#123;item.path&#125;`&#125;&gt;&#123;item.text&#125;&lt;/NavLink&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &#125;)&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小册列表<br>使用ant-design中的list组件进行基本布局</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;List</span><br><span class="line">                size=&quot;large&quot;</span><br><span class="line">                bordered</span><br><span class="line">                dataSource=&#123;this.state.bookList&#125;</span><br><span class="line">                renderItem=&#123;item =&gt; (</span><br><span class="line">                    &lt;List.Item className=&apos;bookList&apos; onClick=&#123;()=&gt;this.showInfo(item.bookId)&#125;&gt;</span><br><span class="line">                        &lt;img alt=&apos;books&apos; src=&#123;item.img&#125; /&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;div style=&#123;&#123;color:&apos;#000&apos;,fontSize:&apos;20px&apos;,fontWeight:400&#125;&#125;&gt;</span><br><span class="line">                                &#123;item.isPresell &amp;&amp; &lt;span className=&quot;presale&quot;&gt;预售&lt;/span&gt; &#125;</span><br><span class="line">                                &lt;span className=&apos;bookName&apos;&gt;&#123;item.name&#125;&lt;/span&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div className=&apos;bookDesc&apos;&gt;&#123;item.desc&#125;&lt;/div&gt;</span><br><span class="line">                            &lt;div className=&apos;bookAuthor&apos;&gt;</span><br><span class="line">                                &lt;NavLink to=&#123;`/user/:$&#123;item.userId&#125;`&#125;&gt;</span><br><span class="line">                                    &lt;Avatar size=&#123;26&#125; src=&#123;item.userImage&#125; /&gt;</span><br><span class="line">                                    &lt;span style=&#123;&#123;color:&apos;#000&apos;,marginLeft:&apos;5px&apos;&#125;&#125;&gt;&#123;item.author&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;/NavLink&gt;</span><br><span class="line">                                &lt;span style=&#123;&#123;color:&apos;#71777c&apos;,margin:&apos;0 10px&apos;,whiteSpace:&apos;nowrap&apos;,overflow:&apos;hidden&apos;&#125;&#125;&gt;&#123;item.selfDesc&#125;&lt;/span&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div className=&apos;other&apos;&gt;</span><br><span class="line">                                &#123;item.isBuy?&lt;span className=&apos;bought&apos;&gt;已购买&lt;/span&gt;:&lt;span className=&apos;price&apos;&gt;￥&#123;item.price&#125;&lt;/span&gt;&#125;</span><br><span class="line">                                &lt;span className=&apos;message&apos;&gt;&#123;item.chapterNum&#125;小节&lt;/span&gt;</span><br><span class="line">                                &#123;item.isBuy &amp;&amp; &lt;span className=&apos;message&apos;&gt;阅读时长&#123;item.readTime&#125;分&lt;/span&gt;&#125;</span><br><span class="line">                                &lt;span className=&apos;message&apos;&gt;&#123;item.purchaseNum&#125;购买&lt;/span&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/List.Item&gt;</span><br><span class="line">                )&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会根据属性是否预售isPresell和是否已经购买isBuy来判断显示不同内容。  </p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://rocky-191.github.io/2019/03/19/react-juejin/" target="_blank" rel="noopener">使用React构建精简版本掘金（一）</a></li><li><a href="https://rocky-191.github.io/2019/03/20/react-juejin1/" target="_blank" rel="noopener">使用React构建精简版本掘金（二）</a></li><li><a href="https://rocky-191.github.io/2019/03/20/react-juejin3/" target="_blank" rel="noopener">使用React构建精简版本掘金（三）</a></li></ul><p>相关详细代码可查看<a href="https://github.com/rocky-191/react-juejin" target="_blank" rel="noopener">github</a>,不要忘了star哦！工作中主要是以vue作为主要技术栈，这是第一次使用React+React-router+Redux来构建项目，不足之处还请大家多多包涵。  </p><p><strong>金三已过，银四会是什么样子呢？</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到目前为止，首页、文章详情页、动态页、话题页及小册页面内容完成了，看一下效果图哈，数据不全，见谅哈！&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>使用React构建精简版本掘金（三）</title>
    <link href="http://yoursite.com/2019/03/20/react-juejin3/"/>
    <id>http://yoursite.com/2019/03/20/react-juejin3/</id>
    <published>2019-03-20T12:23:09.000Z</published>
    <updated>2019-09-28T01:47:20.660Z</updated>
    
    <content type="html"><![CDATA[<p>抽了两天工作中闲暇时间，文章详情页终于写完了，先上图哈，截图少了下面一部分哈，见谅！</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/22/169a455683f49328?w=1228&amp;h=931&amp;f=png&amp;s=181334" alt=""><br>本篇文章为使用React构建精简版本掘金系列第三篇，想看前两篇的话，请查看<a href="https://rocky-191.github.io/2019/03/19/react-juejin/#more" target="_blank" rel="noopener">第一篇</a>,<a href="https://rocky-191.github.io/2019/03/20/react-juejin1/#more" target="_blank" rel="noopener">第二篇</a>。<br><strong>整理一下详情页用到的一些知识点：</strong></p><ul><li>redux存储、取值</li><li>React-router路由跳转传值</li><li>父子组件传值</li></ul><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="左侧部分"><a href="#左侧部分" class="headerlink" title="左侧部分"></a>左侧部分</h2><p>主要包含点赞数量显示、评论数量、收藏按钮，分享链接等。由于要常驻在左侧，且页面滚动过程中位置不变，故使用fixed定位方式，并且使用ant-design中的Avatar,Badge,Icon,Popover组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Avatar,Badge,Icon,Popover &#125; from &apos;antd&apos;;</span><br><span class="line">...</span><br><span class="line">&lt;div style=&#123;articleSuspendedPanel&#125;&gt;</span><br><span class="line">    &lt;Badge count=&#123;this.props.starCount&#125; overflowCount=&#123;this.state.overflowCount&#125; style=&#123;badgeSy&#125;&gt;</span><br><span class="line">        &lt;div style=&#123;panelCircleSy&#125;&gt;</span><br><span class="line">            &lt;Icon type=&quot;like&quot; theme=&quot;filled&quot; style=&#123;IconSy&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/Badge&gt;</span><br><span class="line">    &lt;Badge count=&#123;this.props.commentsCount&#125; overflowCount=&#123;this.state.overflowCount&#125; style=&#123;badgeSy&#125;&gt;</span><br><span class="line">        &lt;div style=&#123;panelCircleSy&#125;&gt;</span><br><span class="line">            &lt;Icon type=&quot;message&quot; theme=&quot;filled&quot; style=&#123;IconSy&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/Badge&gt;</span><br><span class="line">    &lt;div style=&#123;panelCircleSy&#125;&gt;</span><br><span class="line">        &lt;Icon type=&quot;star&quot; theme=&quot;filled&quot; style=&#123;IconSy&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;label&gt;分享&lt;/label&gt;</span><br><span class="line">    &lt;Avatar style=&#123;avatarSy1&#125;&gt;</span><br><span class="line">        &lt;img alt=&quot;&quot; src=&quot;//b-gold-cdn.xitu.io/v3/static/img/weibo.2076a57.svg&quot; /&gt;</span><br><span class="line">    &lt;/Avatar&gt;</span><br><span class="line">    &lt;Avatar style=&#123;avatarSy1&#125;&gt;</span><br><span class="line">        &lt;img alt=&quot;&quot; src=&quot;//b-gold-cdn.xitu.io/v3/static/img/qq.0834411.svg&quot; /&gt;</span><br><span class="line">    &lt;/Avatar&gt;</span><br><span class="line">    &lt;Popover content=&#123;&lt;QRCode value=&#123;window.location.href+&apos;/post/&apos;+this.props.wxShareAddr&#125; /&gt;&#125; placement=&quot;bottom&quot;&gt;</span><br><span class="line">        &lt;Avatar style=&#123;avatarSy1&#125;&gt;</span><br><span class="line">            &lt;img alt=&quot;&quot; src=&quot;//b-gold-cdn.xitu.io/v3/static/img/wechat.63e1ce0.svg&quot; /&gt;</span><br><span class="line">        &lt;/Avatar&gt;</span><br><span class="line">    &lt;/Popover&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>render中的代码结构如上，starCount和commentsCount数据是从父级组件传入的，微信分享扫一扫利用了QRCode组件，关于该组件的介绍可查看上一篇文章，有详细的说明。</p><h2 id="中间部分（重点）"><a href="#中间部分（重点）" class="headerlink" title="中间部分（重点）"></a>中间部分（重点）</h2><p>仔细看的话，其实中间部分也可以分为顶部的作者介绍，包括文章编辑时间，阅读量，登录用户是否关注了作者。第二部分才是真正的文章详情。第三部分有关于该文章的评论区域，最下面是一系列的相关推荐文章。接下来分别介绍下：</p><h3 id="顶部"><a href="#顶部" class="headerlink" title="顶部"></a>顶部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;List</span><br><span class="line">    itemLayout=&quot;horizontal&quot;</span><br><span class="line">    dataSource=&#123;this.state.articleInfo.articleList&#125;</span><br><span class="line">    renderItem=&#123;item =&gt; (</span><br><span class="line">    &lt;List.Item actions=&#123;[item.isFocus?&lt;button className=&apos;focusedBtn&apos;&gt;已关注&lt;/button&gt;:&lt;button className=&apos;focusBtn&apos;&gt;关注&lt;/button&gt;]&#125;&gt;</span><br><span class="line">        &lt;List.Item.Meta</span><br><span class="line">            avatar=&#123;&lt;Avatar src=&#123;item.authorImage&#125; /&gt;&#125;</span><br><span class="line">            title=&#123;item.author&#125;</span><br><span class="line">            description=&#123;&lt;div&gt;&lt;span&gt;&#123;item.editDate&#125;&lt;/span&gt;&lt;span style=&#123;&#123;marginLeft:&apos;10px&apos;&#125;&#125;&gt;阅读&#123;item.readNum&#125;&lt;/span&gt;&lt;/div&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/List.Item&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>很简单的一部分，应该能看明白。</p><h3 id="中间部分"><a href="#中间部分" class="headerlink" title="中间部分"></a>中间部分</h3><p>中间部分我这里就简单的用section包裹内容了，实际开发中个人觉得应该需要读取对应各层标题的样式、正文的样式，分段落显示，需要去分类型解析各种内容，包括图片、超链接等内容。</p><h3 id="评论区域"><a href="#评论区域" class="headerlink" title="评论区域"></a>评论区域</h3><p><img src="https://user-gold-cdn.xitu.io/2019/3/22/169a461c9eebe893?w=720&amp;h=175&amp;f=png&amp;s=9981" alt=""><br>布局问题就不说了，重点说一下输入框评论功能实现，其实类似大家常说的todolist功能。输入内容，点击评论按钮或者直接回车，评论内容添加到评论列表，输入框内容清空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;marginLeft:&apos;10px&apos;,flex:&apos;1&apos;&#125;&#125;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Input value=&#123;this.state.value&#125; placeholder=&quot;输入评论...&quot; onFocus=&#123;this.handleFocus.bind(this)&#125; onChange=&#123;this.handleChange.bind(this)&#125; onPressEnter=&#123;this.handlePressEnter.bind(this)&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        this.state.showIconAndBtn?</span><br><span class="line">            &lt;div style=&#123;&#123;display:&apos;flex&apos;,justifyContent:&apos;space-between&apos;,marginTop:&apos;10px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;span style=&#123;&#123;color:&apos;#027fff&apos;,cursor: &apos;pointer&apos;,display:&apos;flex&apos;,alignItems:&apos;center&apos;&#125;&#125; onClick=&#123;info&#125;&gt;</span><br><span class="line">                    &lt;img alt=&apos;&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/emoji.5594dbb.svg&apos; /&gt;</span><br><span class="line">                    表情</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    &lt;label style=&#123;&#123;color:&apos;#c2c2c2&apos;,marginRight:&apos;8px&apos;&#125;&#125;&gt;Enter&lt;/label&gt;</span><br><span class="line">                    &lt;Button type=&quot;primary&quot; onClick=&#123;this.handlePressEnter.bind(this)&#125;&gt;评论&lt;/Button&gt;</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>showIconAndBtn是控制输入框下面那一行是否显示的，初始进入页面的时候是只能看到输入框，下面的表情和评论按钮只能等输入框获取焦点后才能显示。 输入框上绑定了三个事件，分别用来处理获取焦点事件、输入内容改变事件、按下回车事件。</p><ul><li>获取焦点事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleFocus=()=&gt;&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        showIconAndBtn:true</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入内容改变事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleChange=(e)=&gt;&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        value:e.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>回车事件（后面的评论按钮功能相同）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handlePressEnter=()=&gt;&#123;</span><br><span class="line">    if(this.state.value!==&apos;&apos;)&#123;</span><br><span class="line">        this.props.submitComment(this.state.value);//调用父级组件并传值</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            value:&apos;&apos;,</span><br><span class="line">            showIconAndBtn:false</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        message.warning(&apos;还未填写评论哦！&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有用到子组件向父组件传值的方法，简单介绍下：<br><strong>父向子传值</strong></p><blockquote><p>父向子传值起始比较简单，重点要考虑向下传值是否会使得父组件中的状态过于繁杂，是否会影响页面性能。  </p></blockquote><p>假设存在一个组件ComponentA，在父组件中调用ComponentA，并且传递参数data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">this.state=&#123;</span><br><span class="line">    text:&apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;ComponentA data=&#123;this.state.text&#125; /</span><br></pre></td></tr></table></figure><p>在组件ComponentA中就可以通过this.props.data获取到父组件传入的data值了。<br><strong>子向父传值</strong></p><blockquote><p>由子组件的事件触发，在触发的函数体中调用父组件传入的方法，将子组件里的值传入即可。  </p></blockquote><p>假设存在父组件ComponentParent，子组件ComponentChild,父组件中调用ComponentChild</p><p>父组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">handleChange=(val)=&gt;&#123;</span><br><span class="line">    console.log(`信息:`+val);//子组件传入的数据</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;ComponentChild change=&#123;this.handleChange.bind(this)&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p>子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//假设有个方法叫handleClick</span><br><span class="line">handleClick=()=&gt;&#123;</span><br><span class="line">    this.props.change(&apos;hello&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子组件中执行handleClick方法的时候就会触发父组件中的方法handleChange，并在控制台输出hello。</p><p><strong>兄弟组件传值</strong></p><blockquote><p>可以将数据提升到共同的父组件中，进行传值，之后在利用父子组件传值即可。</p></blockquote><p><strong>多层级组件或者称为不相邻组件传值</strong></p><blockquote><p>可以利用redux管理全局状态，之后在任何地方都可以取到对应的数据。</p></blockquote><p>这种方式的使用方式在<a href="https://rocky-191.github.io/2019/03/19/react-juejin/#more" target="_blank" rel="noopener">第一篇文章</a>做了说明，可以浏览哦！</p><p><strong>待实现功能：</strong></p><ul><li style="list-style: none"><input type="checkbox"> 表情组件</li></ul><h3 id="评论列表区域"><a href="#评论列表区域" class="headerlink" title="评论列表区域"></a>评论列表区域</h3><p>个人实现的这块区域和掘金有少许不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;List</span><br><span class="line">    itemLayout=&quot;vertical&quot;</span><br><span class="line">    size=&quot;large&quot;</span><br><span class="line">    dataSource=&#123;this.props.commentList&#125;</span><br><span class="line">    renderItem=&#123;item =&gt; (</span><br><span class="line">    &lt;List.Item</span><br><span class="line">        key=&#123;item.userId&#125;</span><br><span class="line">        actions=&#123;[&lt;span&gt;&#123;moment().subtract(item.editDate, &apos;days&apos;).fromNow()&#125;&lt;/span&gt;,&lt;IconText type=&quot;like-o&quot; text=&#123;item.starNum&#125; /&gt;, &lt;IconText type=&quot;message&quot; text=&#123;item.commentNum&#125; /&gt;]&#125;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;List.Item.Meta</span><br><span class="line">        avatar=&#123;&lt;a href=&#123;&apos;/user/&apos;+item.userId&#125;&gt;&lt;Avatar src=&#123;item.userImage&#125; /&gt;&lt;/a&gt;&#125;</span><br><span class="line">        title=&#123;&lt;div&gt;&#123;item.authorName&#125;&lt;/div&gt;&#125;</span><br><span class="line">        description=&#123;item.userDesc&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &#123;item.commentText&#125;</span><br><span class="line">    &lt;/List.Item&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>采用了ant-design中的List组件进行显示<br><strong>待实现</strong></p><ul><li style="list-style: none"><input type="checkbox"> 嵌套评论列表</li></ul><h3 id="相关推荐列表"><a href="#相关推荐列表" class="headerlink" title="相关推荐列表"></a>相关推荐列表</h3><p>该部分结构采用了首页列表组件，只需按照文章类型，推荐不同内容即可，这里不再赘述。</p><h2 id="右侧部分"><a href="#右侧部分" class="headerlink" title="右侧部分"></a>右侧部分</h2><p>右侧整体结构和首页右侧内容类似，分6块：</p><ul><li>关于作者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;Card</span><br><span class="line">    title=&quot;关于作者&quot;</span><br><span class="line">    style=&#123;&#123; width: &apos;100%&apos; &#125;&#125;</span><br><span class="line">    hoverable=&#123;&apos;true&apos;&#125;</span><br><span class="line">    headStyle=&#123;&#123;fontSize:&apos;14px&apos;,color:&apos;#333&apos;&#125;&#125;</span><br><span class="line">    bodyStyle=&#123;&#123;padding:&apos;0 16px&apos;&#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;List</span><br><span class="line">        itemLayout=&quot;vertical&quot;</span><br><span class="line">        dataSource=&#123;this.props.author&#125;</span><br><span class="line">        renderItem=&#123;item =&gt; (</span><br><span class="line">        &lt;List.Item onClick=&#123;()=&gt;window.location.href=&apos;/user/&apos;+item.id&#125;&gt;</span><br><span class="line">            &lt;List.Item.Meta</span><br><span class="line">            avatar=&#123;&lt;Avatar size=&#123;46&#125; src=&#123;item.authorImage&#125; /&gt;&#125;</span><br><span class="line">            title=&#123;item.author&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">            &#123;item.isGroup?&lt;div&gt;</span><br><span class="line">                &lt;Avatar style=&#123;&#123; backgroundColor: &apos;#e1efff&apos;,color:&apos;#7bb9ff&apos; &#125;&#125; icon=&quot;user&quot; /&gt;</span><br><span class="line">                &lt;label style=&#123;&#123;color:&apos;#000&apos;,marginLeft:&apos;10px&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;联合编辑&lt;/label&gt;</span><br><span class="line">            &lt;/div&gt;:&apos;&apos;&#125;</span><br><span class="line">            &lt;div style=&#123;&#123;marginTop:&apos;10px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;Avatar style=&#123;&#123; backgroundColor: &apos;#e1efff&apos; &#125;&#125;&gt;</span><br><span class="line">                    &lt;Icon type=&quot;like&quot; theme=&quot;filled&quot; style=&#123;&#123;color:&apos;#7bb9ff&apos;&#125;&#125; /&gt;</span><br><span class="line">                &lt;/Avatar&gt;</span><br><span class="line">                &lt;label style=&#123;&#123;color:&apos;#000&apos;,marginLeft:&apos;10px&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;获得赞数&#123;item.allStarNum&#125;&lt;/label&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;marginTop:&apos;10px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;Avatar style=&#123;&#123; backgroundColor: &apos;#e1efff&apos; &#125;&#125;&gt;</span><br><span class="line">                    &lt;Icon type=&quot;eye&quot; theme=&quot;filled&quot; style=&#123;&#123;color:&apos;#7bb9ff&apos;&#125;&#125; /&gt;</span><br><span class="line">                &lt;/Avatar&gt;</span><br><span class="line">                &lt;label style=&#123;&#123;color:&apos;#000&apos;,marginLeft:&apos;10px&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;获得阅读数&#123;item.allReadNum&lt;99999?item.allReadNum:&apos;99999+&apos;&#125;&lt;/label&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/List.Item&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure><ul><li>感兴趣的小册推荐</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;Card</span><br><span class="line">    title=&quot;你可能感兴趣的小册&quot;</span><br><span class="line">    style=&#123;&#123; width: &apos;100%&apos;,marginTop:&apos;20px&apos; &#125;&#125;</span><br><span class="line">    hoverable=&#123;&apos;true&apos;&#125;</span><br><span class="line">    headStyle=&#123;&#123;fontSize:&apos;14px&apos;,color:&apos;#333&apos;&#125;&#125;</span><br><span class="line">    bodyStyle=&#123;&#123;padding:&apos;0 16px&apos;&#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;List</span><br><span class="line">        itemLayout=&quot;horizontal&quot;</span><br><span class="line">        dataSource=&#123;this.props.recommendBooks&#125;</span><br><span class="line">        className=&quot;bookCard&quot;</span><br><span class="line">        renderItem=&#123;item =&gt; (</span><br><span class="line">        &lt;List.Item onClick=&#123;()=&gt;window.location.href=&apos;/book/&apos;+item.id&#125;&gt;</span><br><span class="line">            &lt;List.Item.Meta</span><br><span class="line">            avatar=&#123;&lt;img alt=&apos;&apos; src=&#123;item.bookImage&#125; /&gt;&#125;</span><br><span class="line">            title=&#123;item.title&#125;</span><br><span class="line">            description=&#123;&lt;p className=&quot;book-desc&quot;&gt;&lt;span&gt;&#123;item.sellNum+&apos;人已购买&apos;&#125;&lt;/span&gt;&lt;span className=&quot;try-read&quot;&gt;试读&lt;/span&gt;&lt;/p&gt;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/List.Item&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure><p>这一块单独抽一个组件，别的地方也可能会用到，后期只需传入小册内容即可。目前首页和文章详情页用的都是这个组件。</p><ul><li>掘金客户端下载二维码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Card style=&#123;&#123; width: &apos;100%&apos;,marginTop:&apos;20px&apos; &#125;&#125; hoverable=&apos;true&apos; className=&quot;download-card&quot; bodyStyle=&#123;&#123;padding:&apos;15px&apos;&#125;&#125;&gt;</span><br><span class="line">    &lt;NavLink to=&apos;/app&apos;&gt;</span><br><span class="line">        &lt;img alt=&apos;qrcode&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/timeline.e011f09.png&apos; /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div className=&quot;headline&quot;&gt;下载掘金客户端&lt;/div&gt;</span><br><span class="line">            &lt;div className=&quot;desc&quot;&gt;一个帮助开发者成长的社区&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/NavLink&gt;</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure><ul><li>掘金微信群</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Card</span><br><span class="line">    style=&#123;&#123; width: &apos;100%&apos;,marginTop:&apos;20px&apos; &#125;&#125;</span><br><span class="line">    hoverable=&#123;&apos;true&apos;&#125;</span><br><span class="line">    bodyStyle=&#123;&#123;padding:&apos;0&apos;&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;img alt=&apos;&apos; src=&apos;//b-gold-cdn.xitu.io/v3/static/img/backend.ba44b94.png&apos; style=&#123;&#123;height:&apos;200px&apos;,width:&apos;100%&apos;&#125;&#125; /&gt;</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure><ul><li>相关文章列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;Card</span><br><span class="line">    title=&quot;相关文章&quot;</span><br><span class="line">    headStyle=&#123;&#123;fontSize:&apos;14px&apos;,color:&apos;#333&apos;&#125;&#125;</span><br><span class="line">    style=&#123;&#123; width: &apos;100%&apos;,marginTop:&apos;20px&apos;&#125;&#125;</span><br><span class="line">    hoverable=&#123;&apos;true&apos;&#125;</span><br><span class="line">    bodyStyle=&#123;&#123;padding:&apos;0 16px&apos;&#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;List</span><br><span class="line">        itemLayout=&quot;vertical&quot;</span><br><span class="line">        dataSource=&#123;this.props.relationArticles&#125;</span><br><span class="line">        split=&#123;false&#125;</span><br><span class="line">        renderItem=&#123;item =&gt; (</span><br><span class="line">        &lt;List.Item onClick=&#123;()=&gt;window.location.href=&apos;/post/&apos;+item.id&#125;&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;color:&apos;#333&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;&#123;item.title&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div style=&#123;&#123;marginTop:&apos;10px&apos;,color:&apos;#b2bac2&apos;,fontSize:&apos;12px&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;Icon type=&quot;like&quot; theme=&quot;filled&quot; style=&#123;&#123;marginRight:&apos;3px&apos;&#125;&#125; /&gt;&#123;item.starNum&#125;</span><br><span class="line">                &lt;Icon type=&quot;message&quot; theme=&quot;filled&quot; style=&#123;&#123;marginLeft:&apos;15px&apos;,marginRight:&apos;3px&apos;&#125;&#125; /&gt;&#123;item.commentNum&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/List.Item&gt;)&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure><ul><li>文章目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&apos;text-catalogue&apos;&gt;</span><br><span class="line">    &lt;Timeline&gt;</span><br><span class="line">        &#123;this.props.data.map((item,index)=&gt;&#123;</span><br><span class="line">            return &lt;Timeline.Item color=&apos;#000&apos; key=&#123;item.text&#125; dot=&#123;&lt;span className=&apos;catalogue-circle&apos;&gt;&lt;/span&gt;&#125;&gt;&#123;(item.children &amp;&amp; item.children.length !== 0)?&lt;div&gt;&lt;a href=&#123;`#heading-$&#123;index&#125;`&#125;&gt;&#123;item.text&#125;&lt;/a&gt;&lt;div className=&apos;secondCatalogue&apos;&gt;&lt;Catalogue data=&#123;item.children&#125; /&gt;&lt;/div&gt;&lt;/div&gt;:&lt;a href=&#123;`#heading-$&#123;index&#125;`&#125;&gt;&#123;item.text&#125;&lt;/a&gt;&#125;&lt;/Timeline.Item&gt;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">    &lt;/Timeline&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>用到了ant-design中的Timeline组件，这个单独抽离成一个组件，整个系统中都可以复用，这里用到了递归组件实现目录嵌套的功能。</p><h2 id="路由跳转传参"><a href="#路由跳转传参" class="headerlink" title="路由跳转传参"></a>路由跳转传参</h2><p>从首页文章列表进入文章详情页的时候需要传递一些参数，比如文章的id值</p><h3 id="方法一（本文采用了该方法）"><a href="#方法一（本文采用了该方法）" class="headerlink" title="方法一（本文采用了该方法）"></a>方法一（本文采用了该方法）</h3><ul><li>第一步<br>在路由文件中设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/post/:articleId&apos; component=&#123;Post&#125;/&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步<br>文章列表点击事件中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">showArticleInfo=(id)=&gt;&#123;</span><br><span class="line">    console.log(`文章id值：$&#123;id&#125;`);</span><br><span class="line">    window.location.href=&apos;/post/&apos;+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步<br>在进入文章详情页的时候就可以获取到文章id了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    const &#123;match&#125;=this.props;</span><br><span class="line">    console.log(`文章id：$&#123;match.params.articleId&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>第一步：定义路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/post&apos; component=&#123;Post&#125; /&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步：传递方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let data = &#123;id:3,name:sam&#125;;</span><br><span class="line">let path = &#123;</span><br><span class="line">  pathname:&apos;/post&apos;,</span><br><span class="line">  state:data,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&#123;path&#125;&gt;详情&lt;/Link&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步：获取</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let data = this.props.location.state;</span><br><span class="line">let &#123;id,name&#125; = data;</span><br></pre></td></tr></table></figure><p>截止到目前为止，首页和文章详情页的结构和基本功能就算完成了，细节后续在优化，剩余部分陆续更新中。   </p><p>上述详细代码请见<a href="https://github.com/rocky-191/react-juejin" target="_blank" rel="noopener">github</a>,不要忘了<strong>star</strong>和<strong>点赞</strong>哦，多谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;抽了两天工作中闲暇时间，文章详情页终于写完了，先上图哈，截图少了下面一部分哈，见谅！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/3/22/169a455683f49328?w=1228&amp;amp;h=931&amp;amp
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>使用React构建精简版本掘金（二）</title>
    <link href="http://yoursite.com/2019/03/20/react-juejin1/"/>
    <id>http://yoursite.com/2019/03/20/react-juejin1/</id>
    <published>2019-03-20T12:23:09.000Z</published>
    <updated>2019-09-28T01:47:20.660Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699a60f0e65a946?w=1088&amp;h=931&amp;f=png&amp;s=150116" alt=""><br>咋一看，是不是感觉掘金改版了呢！如果你有这个错觉，那就说明我仿照的还算可以，我就当是对我的肯定吧，O(∩_∩)O~~</p><h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><h2 id="顶部标签"><a href="#顶部标签" class="headerlink" title="顶部标签"></a>顶部标签</h2><p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699a6698752f04f?w=1084&amp;h=406&amp;f=png&amp;s=71112" alt=""><br>即我上面红框圈住的部分，这部分由于要做页面滚动的时候常驻顶部，个人为了简单省事，采用了ant-design中的Affix组件，另外导航组件我抽离了一个公用组件，从外部传入tags数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Affix&#125; from &apos;antd&apos;;</span><br><span class="line">...</span><br><span class="line">this.state=&#123;</span><br><span class="line">    tags:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:&apos;recommended&apos;,</span><br><span class="line">            text:&apos;推荐&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:&apos;following&apos;,</span><br><span class="line">            text:&apos;关注&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;Affix offsetTop=&#123;this.state.top&#125;&gt;</span><br><span class="line">    &lt;div className=&quot;home-nav&quot;&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">            &lt;HomeNav tags=&#123;this.state.tags&#125; match=&#123;match&#125;/&gt;</span><br><span class="line">            &lt;a href=&quot;/&quot;&gt;标签管理&lt;/a&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/Affix&gt;</span><br></pre></td></tr></table></figure><p>HomeNav组件如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123; NavLink &#125; from &apos;react-router-dom&apos;</span><br><span class="line">...</span><br><span class="line">class HomeNav extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;this.props.tags.map((item,index)=&gt;&#123;</span><br><span class="line">                    return &lt;li key=&#123;item.path&#125;&gt;</span><br><span class="line">                        &lt;NavLink to=&#123;`/timeline/$&#123;item.path&#125;`&#125;&gt;&#123;item.text&#125;&lt;/NavLink&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default HomeNav;</span><br></pre></td></tr></table></figure><h2 id="动作部分"><a href="#动作部分" class="headerlink" title="动作部分"></a>动作部分</h2><p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699a6d9318aae61?w=1105&amp;h=196&amp;f=png&amp;s=26896" alt=""><br>该部分的实现方式可参考上面tag标签实现部分，基本类似。<br>头像部分我使用了ant-design中Avatar，用来代表用户或事物，支持图片、图标或字符展示。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699a704aea145bc?w=1103&amp;h=450&amp;f=png&amp;s=75565" alt=""></p><h2 id="文章列表部分"><a href="#文章列表部分" class="headerlink" title="文章列表部分"></a>文章列表部分</h2><p>列表部分使用了ant-design中list组件</p><ul><li>列表结构实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; List,Statistic,Icon,Popover &#125; from &apos;antd&apos;;</span><br><span class="line">...</span><br><span class="line">const &#123;data&#125;=this.props;</span><br><span class="line">...</span><br><span class="line">&lt;List</span><br><span class="line">    itemLayout=&quot;horizontal&quot;</span><br><span class="line">    dataSource=&#123;data&#125;</span><br><span class="line">    renderItem=&#123;item =&gt; (</span><br><span class="line">    &lt;List.Item extra=&#123;item.articleImage ? &lt;img width=&#123;80&#125; alt=&quot;logo&quot; src=&#123;item.articleImage&#125; /&gt;:&apos;&apos;&#125; onClick=&#123;this.showArticleInfo.bind(this,item.id)&#125;&gt;</span><br><span class="line">        添加内容</span><br><span class="line">    &lt;/List.Item&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>实际中data应该是根据传入的userID和标签去数据库查询得到的真实数据，我这里的data就从上一级中进行了获取。每一个listItem上面绑定了点击事件，最终需要跳转到文章详情页面。</p><ul><li>列表内部结构</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699a7ad410054ff?w=761&amp;h=144&amp;f=png&amp;s=16284" alt=""><br>整体分成上中下三部分来实现布局,右侧的图片是在上一步listItem中配置extra属性可以实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">    &lt;section className=&quot;list-part1&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li className=&quot;item post&quot;&gt;&#123;item.articleType===&apos;1&apos;?&apos;专栏&apos;:&apos;小册&apos;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&#123;item.author&#125;&lt;/li&gt;</span><br><span class="line">            &#123;item.time?&lt;li&gt;&#123;item.time&#125;&lt;/li&gt;:&apos;&apos;&#125;</span><br><span class="line">            &#123;item.tags.length!==0?&lt;li&gt;&#123;item.tags.map((tag,index)=&gt;&#123;</span><br><span class="line">                return &lt;NavLink key=&#123;tag&#125; to=&#123;`/tag/$&#123;tag&#125;`&#125;&gt;&#123;tag&#125;&lt;/NavLink&gt;</span><br><span class="line">            &#125;)&#125;&lt;/li&gt;:&apos;&apos;&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;section className=&quot;list-part2&quot;&gt;</span><br><span class="line">        &lt;NavLink to=&#123;`/post/:articleId`&#125;&gt;&#123;item.title&#125;&lt;/NavLink&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;section className=&quot;list-part3&quot;&gt;</span><br><span class="line">        &#123;item.articleType===&apos;1&apos;?</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Statistic value=&#123;item.starNum&#125; prefix=&#123;&lt;Icon type=&quot;like&quot; theme=&quot;filled&quot; style=&#123;&#123; fontSize: &apos;14px&apos;&#125;&#125; /&gt;&#125; onClick=&#123;()=&gt;this.props.editStar(item.id)&#125; /&gt;</span><br><span class="line">                &lt;Statistic value=&#123;item.commentNum&#125; prefix=&#123;&lt;Icon type=&quot;message&quot; theme=&quot;filled&quot; style=&#123;&#123; fontSize: &apos;14px&apos;&#125;&#125; onClick=&#123;()=&gt;this.props.lookComment(item.id)&#125; /&gt;&#125; /&gt;</span><br><span class="line">                &lt;Icon type=&quot;upload&quot; style=&#123;&#123; fontSize: &apos;16px&apos;,marginLeft:&apos;10px&apos;,borderRight:&apos;none&apos;&#125;&#125; /&gt;</span><br><span class="line">                &lt;Icon type=&quot;star&quot; theme=&quot;filled&quot; style=&#123;&#123; fontSize: &apos;16px&apos;&#125;&#125; onClick=&#123;()=&gt;this.props.collectArticle(item.id)&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;:</span><br><span class="line">            &lt;div className=&quot;xiaoce-action-row&quot;&gt;</span><br><span class="line">                &lt;span className=&quot;link-btn buy&quot;&gt;购买人数: &#123;item.sellNums&#125;&lt;/span&gt;</span><br><span class="line">                &lt;span className=&quot;link-btn sale&quot;&gt;特价: &#123;item.price&#125;元&lt;/span&gt;</span><br><span class="line">                &lt;span className=&quot;link-btn share&quot;&gt;</span><br><span class="line">                    &lt;Icon type=&quot;upload&quot; style=&#123;&#123; fontSize: &apos;16px&apos;,marginLeft:&apos;10px&apos;,borderRight:&apos;none&apos;&#125;&#125; onClick=&#123;()=&gt;this.props.shareArticle(item.id)&#125; /&gt;</span><br><span class="line">                    分享</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure><p>掘金官网文章列表根据文章的类型是专栏还是小册显示不同的内容，即这里根据item的articleType进行了区分，这里用到了三目运算符做了显示控制渲染。<br><strong>React中条件渲染的方式有以下几种，补充下知识点：</strong><br>（1）if 语句<br>（2）三目操作符<br>（3）逻辑 &amp;&amp; 操作符<br>（4）switch.. case.. 语句<br>（5）枚举<br>（6）多层条件渲染<br>（7）使用高阶组件<br>详情可查阅该<a href="https://www.jianshu.com/p/fe5205b33707" target="_blank" rel="noopener">文章</a></p><h2 id="点击分享"><a href="#点击分享" class="headerlink" title="点击分享"></a>点击分享</h2><ul><li>安装qrcode.react插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add qrcode.react --save</span><br></pre></td></tr></table></figure><ul><li>引入使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const QRCode = require(&apos;qrcode.react&apos;);</span><br><span class="line">...</span><br><span class="line">&lt;QRCode value=&#123;this.props.value&#125; /&gt;</span><br></pre></td></tr></table></figure><p>value值是从上一级组件传入的值,该插件属性描述：<br>| prop          | type                     | default value |<br>| ————- | ———————— | ————- |<br>| value         | string                   | -             |<br>| renderAs      | string (‘canvas’ ‘svg’)  | ‘canvas’      |<br>| size          | number                   | 128           |<br>| bgColor       | string (CSS color)       | “#FFFFFF”     |<br>| fgColor       | string (CSS color)       | “#000000”     |<br>| level         | string (‘L’ ‘M’ ‘Q’ ‘H’) | ‘L’           |<br>| includeMargin | boolean                  | false         |</p><ul><li>抽离分享组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">class Qrcode extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            shareTypes:[</span><br><span class="line">                &#123;</span><br><span class="line">                    image:&apos;//b-gold-cdn.xitu.io/v3/static/img/weibo.8e2f5d6.svg&apos;,</span><br><span class="line">                    text:&apos;微博&apos;,</span><br><span class="line">                    showQrcode:false,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    image:&apos;//b-gold-cdn.xitu.io/v3/static/img/wechat.844402c.svg&apos;,</span><br><span class="line">                    text:&apos;微信扫一扫&apos;,</span><br><span class="line">                    showQrcode:true,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const QRCode = require(&apos;qrcode.react&apos;);</span><br><span class="line">        return (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;this.state.shareTypes.map(item=&gt;&#123;</span><br><span class="line">                    return &lt;li key=&#123;item.text&#125; style=&#123;&#123;borderBottom:&apos;1px solid rgba(217,222,224,.99)&apos;,padding:&apos;10px&apos;,cursor:&apos;pointer&apos;&#125;&#125;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;img alt=&#123;item.text&#125; src=&#123;item.image&#125; style=&#123;&#123;width:&apos;24px&apos;,height:&apos;24px&apos;,marginRight:&apos;5px&apos;&#125;&#125; /&gt;</span><br><span class="line">                            &lt;label style=&#123;&#123;color:&apos;#8f969c&apos;&#125;&#125;&gt;&#123;item.text&#125;&lt;/label&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &#123;item.showQrcode?&lt;div style=&#123;&#123;textAlign:&apos;center&apos;&#125;&#125;&gt;</span><br><span class="line">                            &lt;QRCode value=&#123;this.props.value&#125; /&gt;</span><br><span class="line">                        &lt;/div&gt;:&apos;&apos;&#125;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Qrcode;</span><br></pre></td></tr></table></figure><ul><li>分享组件使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Qrcode from &apos;../../components/Qrcode&apos;;</span><br><span class="line">...</span><br><span class="line">&lt;Popover content=&#123;&lt;Qrcode value=&#123;window.location.href+&apos;/&apos;+item.id&#125; /&gt;&#125; placement=&quot;bottom&quot; trigger=&quot;click&quot;&gt;</span><br><span class="line">    &lt;Icon type=&quot;upload&quot; style=&#123;&#123; fontSize: &apos;16px&apos;,marginLeft:&apos;10px&apos;,borderRight:&apos;none&apos;&#125;&#125; onClick=&#123;()=&gt;this.props.shareArticle(item.id)&#125; /&gt;</span><br><span class="line">    分享</span><br><span class="line">&lt;/Popover&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="右侧卡片内容"><a href="#右侧卡片内容" class="headerlink" title="右侧卡片内容"></a>右侧卡片内容</h2><p>这块内容采用了ant-design中的card组件，直接看代码吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Card &#125; from &apos;antd&apos;;</span><br><span class="line">...</span><br><span class="line">&lt;Card</span><br><span class="line">    title=&quot;掘金优秀作者&quot;</span><br><span class="line">    style=&#123;&#123; width: &apos;100%&apos; &#125;&#125;</span><br><span class="line">    hoverable=&#123;&apos;true&apos;&#125;</span><br><span class="line">    actions=&#123;[&lt;NavLink to=&apos;/recommendation/authors/recommended&apos; style=&#123;&#123;color:&apos;#007fff&apos;&#125;&#125;&gt;查看更多&gt;&lt;/NavLink&gt;]&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;List</span><br><span class="line">        itemLayout=&quot;horizontal&quot;</span><br><span class="line">        dataSource=&#123;this.props.goodAuthor&#125;</span><br><span class="line">        renderItem=&#123;item =&gt; (</span><br><span class="line">        &lt;List.Item onClick=&#123;()=&gt;window.location.href=&apos;/user/&apos;+item.id&#125;&gt;</span><br><span class="line">            &lt;List.Item.Meta</span><br><span class="line">            avatar=&#123;&lt;Avatar size=&#123;46&#125; src=&#123;item.userImage&#125; /&gt;&#125;</span><br><span class="line">            title=&#123;item.title&#125;</span><br><span class="line">            description=&#123;&lt;div className=&quot;overflow-ellipsis&quot;&gt;&#123;item.desc&#125;&lt;/div&gt;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/List.Item&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Card&gt;</span><br></pre></td></tr></table></figure><p>goodAuthor数据是从父级传入的数据哈。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699afd7ca3b5310?w=524&amp;h=1602&amp;f=png&amp;s=201017" alt=""><br>这里的内容结构类似，外层card组件，内置不同不同内容，就不重复了，想看具体实现的话请移步<a href="https://github.com/rocky-191/react-juejin" target="_blank" rel="noopener">github</a>,不要忘了star哈。   </p><p>card内部使用list组件，竖着排列各自的内容，这一块总觉得可以抽成一个公用的card组件，然后填充不同内容，暂时就先这样吧，列入后期重构计划！这时就怀念vue中的slot方法了，可以方便的放置不同内容。jsx也有自己的方便之处吧，灵活的使用各种标签。</p><p>以上就是首页的一个简单说明了，页面大部分的链接router跳转功能还没有实现，后续陆续更新中。  </p><p>想看第一篇文章的朋友可以查看<a href="https://rocky-191.github.io/2019/03/19/react-juejin/" target="_blank" rel="noopener">使用React构建精简版本掘金（一）</a>,上述所有详细代码都已经放到<a href="https://github.com/rocky-191/react-juejin" target="_blank" rel="noopener">github</a>了，欢迎浏览和star哈，都已经看到这里了，那就麻烦大家点个赞在走吧！</p><p>既然没有合适的坑，那就趁着闲暇，继续提升自己的能力吧！最后鼓励下自己：扛过了艰难的时光，回头看，那也就不是什么大不了的事情了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/3/20/1699a60f0e65a946?w=1088&amp;amp;h=931&amp;amp;f=png&amp;amp;s=150116&quot; alt=&quot;&quot;&gt;&lt;br&gt;咋一看，是不是感觉掘金改版了呢！如果
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>使用React构建精简版本掘金（一）</title>
    <link href="http://yoursite.com/2019/03/19/react-juejin/"/>
    <id>http://yoursite.com/2019/03/19/react-juejin/</id>
    <published>2019-03-19T13:06:57.000Z</published>
    <updated>2019-09-28T01:47:20.659Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在学习react，就想着能不能用react做一个项目，平时浏览掘金，就拿掘金练手吧！</p><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2019/3/19/169960b16660381f?w=1558&amp;h=1036&amp;f=png&amp;s=155113" alt=""><br>是不是可以以假乱真呢！😂😂😂</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>使用create-react-app初始化项目结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create react-app react-juejin</span><br></pre></td></tr></table></figure><p>这个脚手架会自动帮助我们搭建基础工程，同时安装React项目的各种必要依赖，如果在过程中出现网络问题，请尝试配置代理或使用其他 npm registry。<br>进入项目并启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd react-juejin</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><ul><li>安装ant-design</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure><ul><li>配置UI库懒加载样式<br>需要对整个项目重新配置，这里使用了<a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewired </a>（一个对 create-react-app 进行自定义配置的社区解决方案）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-app-rewired customize-cra</span><br></pre></td></tr></table></figure></li></ul><p>修改package.json 文件如下</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/18/1698f9da727831a1?w=575&amp;h=172&amp;f=png&amp;s=23659" alt=""><br>在根目录中创建config-overrides.js，用于重写覆盖默认的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function override(config, env) &#123;</span><br><span class="line">  // do stuff with the webpack config...</span><br><span class="line">  return config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用 babel-plugin-import<br>该插件用于按需加载plugins和样式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure><p>修改上步创建的config-overrides.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const &#123; override, fixBabelImports &#125; = require(&apos;customize-cra&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = override(</span><br><span class="line">    fixBabelImports(&apos;import&apos;, &#123;</span><br><span class="line">        libraryName: &apos;antd&apos;,</span><br><span class="line">        libraryDirectory: &apos;es&apos;,</span><br><span class="line">        style: &apos;css&apos;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>添加less-loader<br>个人习惯使用less，看个人喜好安装即可，不过查阅上面社区方案react-app-rewired，并没有提供比如sass的重写方案，故如果需要使用sass，可采用别的方案引入。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less less-loader</span><br></pre></td></tr></table></figure><p>修改config-overrides.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//const &#123; override, fixBabelImports &#125; = require(&apos;customize-cra&apos;);</span><br><span class="line">const &#123; override, fixBabelImports, addLessLoader &#125; = require(&apos;customize-cra&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = override(</span><br><span class="line">    fixBabelImports(&apos;import&apos;, &#123;</span><br><span class="line">        libraryName: &apos;antd&apos;,</span><br><span class="line">        libraryDirectory: &apos;es&apos;,</span><br><span class="line">        style: true,</span><br><span class="line">    &#125;),</span><br><span class="line">    addLessLoader(&#123;</span><br><span class="line">        javascriptEnabled: true,</span><br><span class="line">    &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以上详细配置的话可参考<a href="https://ant.design/docs/react/use-with-create-react-app-cn" target="_blank" rel="noopener">ant-design官网</a></p><h2 id="引入redux"><a href="#引入redux" class="headerlink" title="引入redux"></a>引入redux</h2><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux react-redux --save</span><br></pre></td></tr></table></figure></li><li><p>使用方式<br>考虑到之后可能会有多个reducer，开始就把结构弄好，做成日后可以方便合并使用多个reducer的方式<br>（1）创建一个reducer</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 建议使用这中结构</span><br><span class="line"></span><br><span class="line">// 1.定义默认数据</span><br><span class="line">let initialState = &#123;</span><br><span class="line">    notificationCount: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2.Reducer</span><br><span class="line">const pageHeaderReducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;CHANGE_COUNT&apos;:</span><br><span class="line">            return &#123; ...state, notificationCount: action.notificationCount &#125;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 3.导出</span><br><span class="line">export default pageHeaderReducer;</span><br></pre></td></tr></table></figure><p>（2）创建index.js,作为合并所有reducer的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;combineReducers&#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">import pageHeaderReducer from &apos;./pageHeader.js&apos;;</span><br><span class="line"></span><br><span class="line">const appReducer = combineReducers(&#123;</span><br><span class="line">    pageHeaderReducer</span><br><span class="line">&#125;);</span><br><span class="line">export default appReducer;</span><br></pre></td></tr></table></figure><p>（3）App.js中使用定义好的reducer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import appReducer from &apos;./reducers/index.js&apos;;</span><br><span class="line">// 使用合并后的那个Reducer</span><br><span class="line">const store = createStore(appReducer);</span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">          ...</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)在header/index.js中使用redux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">class Header extends Component &#123;</span><br><span class="line">    ...</span><br><span class="line">    render() &#123;</span><br><span class="line">        ...</span><br><span class="line">        return (</span><br><span class="line">            &lt;Affix offsetTop=&#123;this.state.top&#125;&gt;</span><br><span class="line">                ...</span><br><span class="line">                &lt;Badge count=&#123;this.props.count&#125; overflowCount=&#123;10&#125;&gt;</span><br><span class="line">                    &lt;a href=&quot;/&quot;&gt;</span><br><span class="line">                        &lt;Icon type=&quot;notification&quot; /&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                &lt;/Badge&gt;</span><br><span class="line">            &lt;/Affix&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        count: state.pageHeaderReducer.notificationCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Header=connect(mapStateToProps)(Header)</span><br><span class="line"></span><br><span class="line">export default Header;</span><br></pre></td></tr></table></figure><p>到目前为止，就可以在外部修改notificationCount的值，通过redux，组件内部就可以正常获取到对应的count值。<br>更详细的redux配置可以参考<a href="http://cn.redux.js.org/" target="_blank" rel="noopener">redux中文文档</a></p><h2 id="添加路由react-router"><a href="#添加路由react-router" class="headerlink" title="添加路由react-router"></a>添加路由react-router</h2><p>首页导航中存在5个tab切换，分别对应这不同的页面内容。接下来介绍如何通过react-router实现不同页面内容的跳转。</p><ul><li>安装react-router</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom --save</span><br></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Switch, Route &#125; from &apos;react-router-dom&apos;;</span><br><span class="line">...</span><br><span class="line">class Main extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Switch&gt;</span><br><span class="line">                    &lt;Route exact path=&apos;/&apos; component=&#123;Home&#125;/&gt;</span><br><span class="line">                    &lt;Route path=&apos;/timeline&apos; component=&#123;Home&#125;/&gt;</span><br><span class="line">                    &lt;Route path=&apos;/dynamic&apos; component=&#123;Dynamic&#125;/&gt;</span><br><span class="line">                    &lt;Route path=&apos;/topic&apos; component=&#123;Topic&#125;/&gt;</span><br><span class="line">                    &lt;Route path=&apos;/brochure&apos; component=&#123;Brochure&#125;/&gt;</span><br><span class="line">                    &lt;Route path=&apos;/activity&apos; component=&#123;Activity&#125;/&gt;</span><br><span class="line">                &lt;/Switch&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面的exact表示绝对匹配/,如果不注明exact,则/还会匹配/timeline等等上面代码实现了一个类似tabbar切换的效果</strong></p><ul><li>tab导航</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;this.state.navs.map((item,index)=&gt;&#123;</span><br><span class="line">                    return &lt;li key=&#123;item.path&#125; className=&#123;item.isActived?&apos;activeLi&apos;:&apos;&apos;&#125; onClick=&#123;this.handelClick.bind(this,index)&#125;&gt;</span><br><span class="line">                                &lt;Link to=&#123;item.path&#125;&gt;&#123;item.text&#125;&lt;/Link&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>react-router中提供了Link和NavLik两种方式，如果仅仅需要匹配路由,使用Link就可以了,而NavLink的不同在于可以给当前选中的路由添加样式, 比如上面写到的activeStyle和activeClassName</strong><br>更详细的react-router配置可以参考<a href="https://react-guide.github.io/react-router-cn/index.html" target="_blank" rel="noopener">React-router中文文档</a></p><p>到目前为止，基础结构就算是完成了，后续的就需要往各个页面添加实际内容了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/19/16993c311993d6ca?w=1398&amp;h=322&amp;f=gif&amp;s=130255" alt=""></p><p>目前效果图如上所示，后续不断更新中。以上详细代码见<a href="https://github.com/rocky-191/react-juejin" target="_blank" rel="noopener">github</a>,欢迎点赞，您的点赞是我的动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正在学习react，就想着能不能用react做一个项目，平时浏览掘金，就拿掘金练手吧！&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>taro多端实践初探</title>
    <link href="http://yoursite.com/2019/03/07/taroapp/"/>
    <id>http://yoursite.com/2019/03/07/taroapp/</id>
    <published>2019-03-07T14:56:27.000Z</published>
    <updated>2019-09-28T01:47:20.662Z</updated>
    
    <content type="html"><![CDATA[<p>历史的发展，小程序风行一时，安卓/ios/H5/微信小程序/支付宝小程序/头条小程序，产品经理让你适配这么多，你的心情如何呢？然而总会有人给咱们造出合适的工具，解放生产力，一次编码，多端运行。开始探索之旅吧！</p><a id="more"></a><h2 id="taro安装"><a href="#taro安装" class="headerlink" title="taro安装"></a>taro安装</h2><p>安装 Taro 开发工具 @tarojs/cli<br>使用 npm 或者 yarn 全局安装，或者直接使用npx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @tarojs/cli</span><br><span class="line">$ yarn global add @tarojs/cli</span><br></pre></td></tr></table></figure><h2 id="使用命令创建模版"><a href="#使用命令创建模版" class="headerlink" title="使用命令创建模版"></a>使用命令创建模版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ taro init multiportApp</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/7/16958317533d8d4b?w=1572&amp;h=742&amp;f=png&amp;s=113477" alt=""><br>按照自己情况选择安装即可</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入对应目录，执行命令启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev:h5</span><br></pre></td></tr></table></figure><p>会出现启动成功的界面，如下</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/7/1695833e27156fa9?w=1998&amp;h=1246&amp;f=png&amp;s=237512" alt=""><br>自动就会打开浏览器，出现hello world界面，表示项目启动成功了！</p><h2 id="todolist功能实现"><a href="#todolist功能实现" class="headerlink" title="todolist功能实现"></a>todolist功能实现</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>在pages/index/index.js文件中添加如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state=&#123;</span><br><span class="line">      val:&apos;&apos;,</span><br><span class="line">      todos:[</span><br><span class="line">        &#123;</span><br><span class="line">          title:&apos;吃饭&apos;,</span><br><span class="line">          done:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title:&apos;睡觉&apos;,</span><br><span class="line">          done:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title:&apos;coding&apos;,</span><br><span class="line">          done:false</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View className=&apos;index&apos;&gt;</span><br><span class="line">        &lt;Text&gt;Hello world!&lt;/Text&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          this.state.todos.map((item,index)=&gt;&#123;</span><br><span class="line">            return &lt;View key=&#123;index&#125;&gt;&#123;item.title&#125;&lt;/View&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>列表渲染搞定。<br><img src="https://user-gold-cdn.xitu.io/2019/3/7/169584f746205544?w=890&amp;h=1524&amp;f=png&amp;s=48060" alt=""></p><h3 id="添加输入框和按钮"><a href="#添加输入框和按钮" class="headerlink" title="添加输入框和按钮"></a>添加输入框和按钮</h3><p>引入组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; View, Text,Input,Button &#125; from &apos;@tarojs/components&apos;</span><br></pre></td></tr></table></figure></p><p>render修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View className=&apos;index&apos;&gt;</span><br><span class="line">        &lt;Text&gt;Hello world!&lt;/Text&gt;</span><br><span class="line">        &lt;Input value=&#123;this.state.val&#125; onInput=&#123;this.handleInput&#125;&gt;&lt;/Input&gt;</span><br><span class="line">        &lt;Button onClick=&#123;this.handleClick&#125;&gt;添加&lt;/Button&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          this.state.todos.map((item,index)=&gt;&#123;</span><br><span class="line">            return &lt;View key=&#123;index&#125;&gt;&#123;item.title&#125;&lt;/View&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>添加方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">handleInput=(e)=&gt;&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      val:e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick=()=&gt;&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      todos:[...this.state.todos,&#123;title:this.state.val,done:false&#125;],</span><br><span class="line">      val:&apos;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的todolist就算完成了，界面有点丑，继续优化！<br><img src="https://user-gold-cdn.xitu.io/2019/3/7/169585c9775a2c21?w=431&amp;h=737&amp;f=gif&amp;s=40747" alt=""></p><h2 id="优化，引入UI库"><a href="#优化，引入UI库" class="headerlink" title="优化，引入UI库"></a>优化，引入UI库</h2><h3 id="安装taro-ui"><a href="#安装taro-ui" class="headerlink" title="安装taro-ui"></a>安装taro-ui</h3><p><a href="https://taro-ui.aotu.io/#/docs/quickstart" target="_blank" rel="noopener">官网</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save taro-ui</span><br></pre></td></tr></table></figure></p><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><p>由于引用 <code>node_modules</code> 的模块，默认不会编译，所以需要额外给 H5 配置 <code>esnextModules</code>，在 taro 项目的 <code>config/index.js</code> 中新增如下配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h5: &#123;</span><br><span class="line">  esnextModules: [&apos;taro-ui&apos;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h3><p>在app.scss中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &apos;taro-ui/dist/style/index.scss&apos;</span><br></pre></td></tr></table></figure><p>在index.js中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AtList, AtListItem &#125; from &quot;taro-ui&quot;</span><br></pre></td></tr></table></figure><p>修改render</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View className=&apos;index&apos;&gt;</span><br><span class="line">        &lt;Text&gt;Hello world!&lt;/Text&gt;</span><br><span class="line">        &lt;Input value=&#123;this.state.val&#125; onInput=&#123;this.handleInput&#125;&gt;&lt;/Input&gt;</span><br><span class="line">        &lt;Button onClick=&#123;this.handleClick&#125;&gt;添加&lt;/Button&gt;</span><br><span class="line">        &lt;AtList&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            this.state.todos.map((item,index)=&gt;&#123;</span><br><span class="line">              return &lt;AtListItem key=&#123;index&#125; title=&#123;item.title&#125;&gt;&lt;/AtListItem&gt;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/AtList&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/7/16958920d3f9deba?w=860&amp;h=776&amp;f=png&amp;s=32921" alt=""></p><h3 id="添加滑块开关，改变item状态"><a href="#添加滑块开关，改变item状态" class="headerlink" title="添加滑块开关，改变item状态"></a>添加滑块开关，改变item状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AtListItem key=&#123;index&#125; title=&#123;item.title&#125; className=&#123;&#123;&apos;done&apos;:item.done&#125;&#125; isSwitch switchIsCheck=&#123;item.done&#125; onSwitchChange=&#123;(e)=&gt;this.handleChange(e,index)&#125;&gt;&lt;/AtListItem&gt;</span><br></pre></td></tr></table></figure><p>增加一个isSwitch,switch切换事件，class。<br>增加事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handleChange=(e,i)=&gt;&#123;</span><br><span class="line">    console.log(e,i);</span><br><span class="line">    const todos=[...this.state.todos];</span><br><span class="line">    todos[i].done=e.detail.value;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      todos</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在同级目录下index.scss中增加样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.done&#123;</span><br><span class="line">  color: red;</span><br><span class="line">  text-decoration: line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>h5效果<br><img src="https://user-gold-cdn.xitu.io/2019/3/7/169589ea2f51be88?w=854&amp;h=1286&amp;f=png&amp;s=50703" alt=""><br>微信小程序中的效果</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/7/16958a1601ff0e3d?w=780&amp;h=1364&amp;f=png&amp;s=61825" alt=""><br>这就是这个框架的威力，感谢taro开发团队。)</p><p><strong>最后在说一句，正在找工作，坐标北京，各位大佬有合适的机会推荐下哈！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;历史的发展，小程序风行一时，安卓/ios/H5/微信小程序/支付宝小程序/头条小程序，产品经理让你适配这么多，你的心情如何呢？然而总会有人给咱们造出合适的工具，解放生产力，一次编码，多端运行。开始探索之旅吧！&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="taro" scheme="http://yoursite.com/tags/taro/"/>
    
  </entry>
  
  <entry>
    <title>mvvm简易版本实现</title>
    <link href="http://yoursite.com/2019/03/05/mvvm/"/>
    <id>http://yoursite.com/2019/03/05/mvvm/</id>
    <published>2019-03-05T13:49:00.000Z</published>
    <updated>2019-09-28T01:47:20.658Z</updated>
    
    <content type="html"><![CDATA[<p>用了两年左右的vue，虽然看过vue的源码，推荐黄轶大佬的vue源码分析，相当到位。从头梳理了vue的实现过程。周末又看了一个公开课的vue源码分析，想着自己是不是也可以写一个来实现，说干就干，开始coding！<br>目前最新版本的vue内部依然使用了Object.defineProperty()来实现对数据属性的劫持，进而达到监听数据变动的效果。  </p><ul><li>需要数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者。</li><li>需要指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数。</li><li>一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图。</li><li>mvvm入口函数，整合以上三者，实现数据响应。<br>相信看过vue官网的小伙伴们一定看过下面这张图吧，解释了vue是如何实现响应式的数据绑定。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/3/5/1694e017cb783666?w=1278&amp;h=746&amp;f=png&amp;s=86912" alt=""></p><h2 id="Observer类的实现"><a href="#Observer类的实现" class="headerlink" title="Observer类的实现"></a>Observer类的实现</h2><p>主要利用了Object.defineProperty()这个方法，对数据进行遍历，给每一个对象都添加了getter()和setter().主要代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Observer&#123;</span><br><span class="line">    constructor(data)&#123;</span><br><span class="line">        this.data=data;</span><br><span class="line">        this.traverse(data);</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(data) &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        Object.keys(data).forEach(function(key) &#123;</span><br><span class="line">            self.convert(key, data[key]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    convert(key,val)&#123;</span><br><span class="line">        this.defineReactive(this.data, key, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defineReactive(data, key, val) &#123;</span><br><span class="line">        var dep = new Dep();</span><br><span class="line">        var childObj = observe(val);</span><br><span class="line"></span><br><span class="line">        Object.defineProperty(data, key, &#123;</span><br><span class="line">            enuselfrable: true, // 可枚举</span><br><span class="line">            configurable: false, // 不能再define</span><br><span class="line">            get()&#123;</span><br><span class="line">                if (Dep.target) &#123;</span><br><span class="line">                    dep.depend();</span><br><span class="line">                &#125;</span><br><span class="line">                return val;</span><br><span class="line">            &#125;,</span><br><span class="line">            set(newVal) &#123;</span><br><span class="line">                if (newVal === val) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                val = newVal;</span><br><span class="line">                // 新的值是object的话，进行监听</span><br><span class="line">                childObj = observe(newVal);</span><br><span class="line">                // 通知订阅者</span><br><span class="line">                dep.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function observe(value, vm) &#123;</span><br><span class="line">    if (!value || typeof value !== &apos;object&apos;) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    return new Observer(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上的方法，我们就劫持到了数据属性。</p><h2 id="Compile类的实现"><a href="#Compile类的实现" class="headerlink" title="Compile类的实现"></a>Compile类的实现</h2><p>主要用来解析各种指令，比如v-modal，v-on:click等指令。然后将模版中的变量替换成数据，渲染view，将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据发生变动，收到通知，更新视图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">class Compile&#123;</span><br><span class="line">    constructor(el,vm)&#123;</span><br><span class="line">        this.$vm = vm;</span><br><span class="line">        this.$el = this.isElementNode(el) ? el : document.querySelector(el);</span><br><span class="line">        if (this.$el) &#123;</span><br><span class="line">            this.$fragment = this.node2Fragment(this.$el);</span><br><span class="line">            this.init();</span><br><span class="line">            this.$el.appendChild(this.$fragment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node2Fragment(el)&#123;</span><br><span class="line">        var fragment = document.createDocumentFragment(),</span><br><span class="line">            child;</span><br><span class="line"></span><br><span class="line">        // 将原生节点拷贝到fragment</span><br><span class="line">        while (child = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(child);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init()&#123;</span><br><span class="line">        this.compileElement(this.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileElement(el)&#123;</span><br><span class="line">        var childNodes = el.childNodes,</span><br><span class="line">            self = this;</span><br><span class="line"></span><br><span class="line">        [].slice.call(childNodes).forEach(function(node) &#123;</span><br><span class="line">            var text = node.textContent;</span><br><span class="line">            var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/;</span><br><span class="line"></span><br><span class="line">            if (self.isElementNode(node)) &#123;</span><br><span class="line">                self.compile(node);</span><br><span class="line"></span><br><span class="line">            &#125; else if (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                self.compileText(node, RegExp.$1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                self.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compile(node)&#123;</span><br><span class="line">        var nodeAttrs = node.attributes,</span><br><span class="line">            self = this;</span><br><span class="line"></span><br><span class="line">        [].slice.call(nodeAttrs).forEach(function(attr) &#123;</span><br><span class="line">            var attrName = attr.name;</span><br><span class="line">            if (self.isDirective(attrName)) &#123;</span><br><span class="line">                var exp = attr.value;</span><br><span class="line">                var dir = attrName.substring(2);</span><br><span class="line">                // 事件指令</span><br><span class="line">                if (self.isEventDirective(dir)) &#123;</span><br><span class="line">                    compileUtil.eventHandler(node, self.$vm, exp, dir);</span><br><span class="line">                    // 普通指令</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, self.$vm, exp);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node.removeAttribute(attrName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileText(node, exp)&#123;</span><br><span class="line">        compileUtil.text(node, this.$vm, exp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isDirective(attr)&#123;</span><br><span class="line">        return attr.indexOf(&apos;v-&apos;) == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isEventDirective(dir)&#123;</span><br><span class="line">        return dir.indexOf(&apos;on&apos;) === 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isElementNode(node)&#123;</span><br><span class="line">        return node.nodeType == 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isTextNode(node)&#123;</span><br><span class="line">        return node.nodeType == 3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指令处理集合</span><br><span class="line">var compileUtil = &#123;</span><br><span class="line">    text: function(node, vm, exp) &#123;</span><br><span class="line">        this.bind(node, vm, exp, &apos;text&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    html: function(node, vm, exp) &#123;</span><br><span class="line">        this.bind(node, vm, exp, &apos;html&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    model: function(node, vm, exp) &#123;</span><br><span class="line">        this.bind(node, vm, exp, &apos;model&apos;);</span><br><span class="line"></span><br><span class="line">        var self = this,</span><br><span class="line">            val = this._getVMVal(vm, exp);</span><br><span class="line">        node.addEventListener(&apos;input&apos;, function(e) &#123;</span><br><span class="line">            var newValue = e.target.value;</span><br><span class="line">            if (val === newValue) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            self._setVMVal(vm, exp, newValue);</span><br><span class="line">            val = newValue;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    class: function(node, vm, exp) &#123;</span><br><span class="line">        this.bind(node, vm, exp, &apos;class&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    bind: function(node, vm, exp, dir) &#123;</span><br><span class="line">        var updaterFn = updater[dir + &apos;Updater&apos;];</span><br><span class="line"></span><br><span class="line">        updaterFn &amp;&amp; updaterFn(node, this._getVMVal(vm, exp));</span><br><span class="line"></span><br><span class="line">        new Watcher(vm, exp, function(value, oldValue) &#123;</span><br><span class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 事件处理</span><br><span class="line">    eventHandler: function(node, vm, exp, dir) &#123;</span><br><span class="line">        var eventType = dir.split(&apos;:&apos;)[1],</span><br><span class="line">            fn = vm.$options.methods &amp;&amp; vm.$options.methods[exp];</span><br><span class="line"></span><br><span class="line">        if (eventType &amp;&amp; fn) &#123;</span><br><span class="line">            node.addEventListener(eventType, fn.bind(vm), false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _getVMVal: function(vm, exp) &#123;</span><br><span class="line">        var val = vm;</span><br><span class="line">        exp = exp.split(&apos;.&apos;);</span><br><span class="line">        exp.forEach(function(k) &#123;</span><br><span class="line">            val = val[k];</span><br><span class="line">        &#125;);</span><br><span class="line">        return val;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _setVMVal: function(vm, exp, value) &#123;</span><br><span class="line">        var val = vm;</span><br><span class="line">        exp = exp.split(&apos;.&apos;);</span><br><span class="line">        exp.forEach(function(k, i) &#123;</span><br><span class="line">            // 非最后一个key，更新val的值</span><br><span class="line">            if (i &lt; exp.length - 1) &#123;</span><br><span class="line">                val = val[k];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                val[k] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var updater = &#123;</span><br><span class="line">    textUpdater: function(node, value) &#123;</span><br><span class="line">        node.textContent = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    htmlUpdater: function(node, value) &#123;</span><br><span class="line">        node.innerHTML = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    classUpdater: function(node, value, oldValue) &#123;</span><br><span class="line">        var className = node.className;</span><br><span class="line">        className = className.replace(oldValue, &apos;&apos;).replace(/\s$/, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">        var space = className &amp;&amp; String(value) ? &apos; &apos; : &apos;&apos;;</span><br><span class="line"></span><br><span class="line">        node.className = className + space + value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    modelUpdater: function(node, value, oldValue) &#123;</span><br><span class="line">        node.value = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Watcher类的实现"><a href="#Watcher类的实现" class="headerlink" title="Watcher类的实现"></a>Watcher类的实现</h2><p>作为链接的桥梁，链接了compile和observer。添加订阅者，当检测到属性发生变化，接收到dep.notify()的通知的时候，就执行自身的update()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">class Watcher&#123;</span><br><span class="line">    constructor(vm, expOrFn, cb)&#123;</span><br><span class="line">        this.cb = cb;</span><br><span class="line">        this.vm = vm;</span><br><span class="line">        this.expOrFn = expOrFn;</span><br><span class="line">        this.depIds = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        if (typeof expOrFn === &apos;function&apos;) &#123;</span><br><span class="line">            this.getter = expOrFn;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.getter = this.parseGetter(expOrFn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.value = this.get();</span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123;</span><br><span class="line">        this.run();</span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;</span><br><span class="line">        var value = this.get();</span><br><span class="line">        var oldVal = this.value;</span><br><span class="line">        if (value !== oldVal) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.cb.call(this.vm, value, oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addDep(dep)&#123;</span><br><span class="line">        if (!this.depIds.hasOwnProperty(dep.id)) &#123;</span><br><span class="line">            dep.addSub(this);</span><br><span class="line">            this.depIds[dep.id] = dep;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    get() &#123;</span><br><span class="line">        Dep.target = this;</span><br><span class="line">        var value = this.getter.call(this.vm, this.vm);</span><br><span class="line">        Dep.target = null;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parseGetter(exp)&#123;</span><br><span class="line">        if (/[^\w.$]/.test(exp)) return;</span><br><span class="line"></span><br><span class="line">        var exps = exp.split(&apos;.&apos;);</span><br><span class="line"></span><br><span class="line">        return function(obj) &#123;</span><br><span class="line">            for (var i = 0, len = exps.length; i &lt; len; i++) &#123;</span><br><span class="line">                if (!obj) return;</span><br><span class="line">                obj = obj[exps[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            return obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="mvvm实现"><a href="#mvvm实现" class="headerlink" title="mvvm实现"></a>mvvm实现</h2><p>MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化，触发视图更新；视图交互变化(input) 触发数据model变更的双向绑定效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Mvvm&#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        this.$options=options;</span><br><span class="line">        this.data=this._data = this.$options.data;</span><br><span class="line">        console.log(this.$options)</span><br><span class="line">        var self = this;</span><br><span class="line">        // 数据代理,实现响应，vue3会改写，使用proxy代理方式</span><br><span class="line">        Object.keys(this.data).forEach(function(key) &#123;</span><br><span class="line">            self.defineReactive(key);</span><br><span class="line">        &#125;);</span><br><span class="line">        this.initComputed();</span><br><span class="line"></span><br><span class="line">        new Observer(this.data, this);</span><br><span class="line"></span><br><span class="line">        this.$compile = new Compile(this.$options.el || document.body, this)</span><br><span class="line">    &#125;</span><br><span class="line">    defineReactive(key)&#123;</span><br><span class="line">        var self=this;</span><br><span class="line">        Object.defineProperty(this,key,&#123;</span><br><span class="line">            configurable:false,</span><br><span class="line">            enuselfrable:true,</span><br><span class="line">            get()&#123;</span><br><span class="line">                return self.data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set(newValue)&#123;</span><br><span class="line">                self.data[key]=newValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上就大功告成了，大部分代码都是参考了vue源码的实现，学着读源码吧，体会vue设计的优雅。顺便推荐一个github读源码的chrome插件：octotree.本文完整代码请查看<a href="https://github.com/rocky-191/mvvm" target="_blank" rel="noopener">github</a>  </p><p>本文同步发表于掘金/segmentfault</p><p><strong>顺便说一句，最近开始找工作了，坐标北京，如果各位大佬有机会，望推荐下哈，在此先行谢过！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用了两年左右的vue，虽然看过vue的源码，推荐黄轶大佬的vue源码分析，相当到位。从头梳理了vue的实现过程。周末又看了一个公开课的vue源码分析，想着自己是不是也可以写一个来实现，说干就干，开始coding！&lt;br&gt;目前最新版本的vue内部依然使用了Object.def
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack4.0配置记录（2）</title>
    <link href="http://yoursite.com/2019/02/02/webpackConfig2/"/>
    <id>http://yoursite.com/2019/02/02/webpackConfig2/</id>
    <published>2019-02-02T02:40:56.000Z</published>
    <updated>2019-09-28T01:47:20.667Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇<a href="https://rocky-191.github.io/2019/02/01/webpackConfig1/#more" target="_blank" rel="noopener">webpack4.0配置记录(1)</a>,继续记录学习webpack配置。</p><a id="more"></a><h2 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new Webpack.DefinePlugin(&#123;//用来定义全局环境变量</span><br><span class="line">    DEV:JSON.stringify(&apos;dev&apos;),</span><br><span class="line">    FLAG:&apos;true&apos;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="webpack简单优化"><a href="#webpack简单优化" class="headerlink" title="webpack简单优化"></a>webpack简单优化</h2><ol><li><p>noParse</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    noParse:&apos;/jquery/&apos;,//不去解析设置的包所依赖的关系,如jquery</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ignorePlugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    noParse:&apos;/jquery/&apos;,//不去解析设置的包所依赖的关系</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:/\.js$/,</span><br><span class="line">            exclude:/node_modules/,</span><br><span class="line">            include:path.resolve(&apos;src&apos;),</span><br><span class="line">            use:&#123;</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    presets:[</span><br><span class="line">                        &apos;@babel/preset-env&apos;,</span><br><span class="line">                        &apos;@babel/preset-react&apos;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过exclude排除和include包含某些模块<br>另外也可以使用webpack自带的ignorePlugin插件排除某些包，减少体积。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new webpack.IgnorePlugin(/\.\/locale/,/moment/),</span><br></pre></td></tr></table></figure><p>以上配置忽略了时间格式化moment.js中的语言包  </p><ol start="3"><li><p>happypack多线程打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let Happypack=require(&apos;happypack&apos;)</span><br><span class="line">...</span><br><span class="line">module.exports=&#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        noParse:&apos;/jquery/&apos;,//不去解析设置的包所依赖的关系</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                include:path.resolve(&apos;src&apos;),</span><br><span class="line">                use:&apos;Happypack/loader?id=js&apos;</span><br><span class="line">                // use:&#123;</span><br><span class="line">                //     loader:&apos;babel-loader&apos;,</span><br><span class="line">                //     options:&#123;</span><br><span class="line">                //         presets:[</span><br><span class="line">                //             &apos;@babel/preset-env&apos;,</span><br><span class="line">                //             &apos;@babel/preset-react&apos;</span><br><span class="line">                //         ]</span><br><span class="line">                //     &#125;</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new Happypack(&#123;</span><br><span class="line">            id:&apos;js&apos;,</span><br><span class="line">            use:[</span><br><span class="line">                &#123;</span><br><span class="line">                    loader:&apos;babel-loader&apos;,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets:[</span><br><span class="line">                            &apos;@babel/preset-env&apos;,</span><br><span class="line">                            &apos;@babel/preset-react&apos;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>webpack内置功能<br>(1)tree-shaking<br>(2)scope-hosting<br><strong>这两项优化只在生产环境下有效</strong>  </p></li><li>抽离公共代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        splitChunks:&#123;//分割代码块</span><br><span class="line">            cacheGroups:&#123;//缓冲组</span><br><span class="line">                common:&#123;</span><br><span class="line">                    chunks:&apos;initial&apos;,</span><br><span class="line">                    minSize:0,//抽离模块最小粒度是0</span><br><span class="line">                    minChunks:2//表示代码块用过2次以上就要抽离</span><br><span class="line">                &#125;,</span><br><span class="line">                vendor:&#123;</span><br><span class="line">                    priority:1,//相当于权重，先抽离第三方模块，如果不设置该属性，分割代码块将从上到下，无法抽离第三方模块。</span><br><span class="line">                    test:/node_modules/,</span><br><span class="line">                    chunks:&apos;initial&apos;,</span><br><span class="line">                    minSize:0,//抽离模块最小是0</span><br><span class="line">                    minChunks:2//表示用过2次以上就要抽离</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>文件热更新</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">    hot:true</span><br><span class="line">&#125;,</span><br><span class="line">plugins:[</span><br><span class="line">    new webpack.NamedModulesPlugin(),//打印更新的模块路径</span><br><span class="line">    new webpack.HotModuleReplacementPlugin()//热更新</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>7.可以使用dllPlugin动态链接库优化<br>DllPlugin 和 DllReferencePlugin提供了以大幅度提高构建时间性能的方式拆分软件包的方法。原理是将特定的第三方NPM包模块提前构建，然后通过页面引入。这不仅能够使得vendor文件可以大幅度减小，同时，也极大的提高了构件速度。网上别的大神有一篇文章写的很详细，可以参考，<a href="https://github.com/nicejade/vue-boilerplate-template/blob/master/build/webpack.dll.conf.js" target="_blank" rel="noopener">传送门</a>。  </p><p>以上就是一些自己在学习webpack4.0配置过程中的一些学习记录，写出来和大家分享，如果有错误，还望告知。欢迎关注交流！不要忘了点个赞，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇&lt;a href=&quot;https://rocky-191.github.io/2019/02/01/webpackConfig1/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack4.0配置记录(1)&lt;/a&gt;,继续记录学习webpack配置。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4.0配置记录（1）</title>
    <link href="http://yoursite.com/2019/02/01/webpackConfig1/"/>
    <id>http://yoursite.com/2019/02/01/webpackConfig1/</id>
    <published>2019-02-01T09:25:47.000Z</published>
    <updated>2019-09-28T01:47:20.666Z</updated>
    
    <content type="html"><![CDATA[<p>趁着假期闲暇，练习下webpack4.0的一些配置。    </p><a id="more"></a><h2 id="webpack4优化压缩js和css方式"><a href="#webpack4优化压缩js和css方式" class="headerlink" title="webpack4优化压缩js和css方式"></a>webpack4优化压缩js和css方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let UglifyJsPlugin = require(&quot;uglifyjs-webpack-plugin&quot;);</span><br><span class="line">let OptimizeCSSAssetsPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;);</span><br><span class="line">optimization: &#123;//优化项</span><br><span class="line">    minimizer: [</span><br><span class="line">        new UglifyJsPlugin(&#123;</span><br><span class="line">            cache: true,</span><br><span class="line">            parallel: true,//并发打包</span><br><span class="line">            sourceMap: true // set to true if you want JS source maps</span><br><span class="line">        &#125;),//开发环境下不压缩js，想启用压缩功能，需要把mode切换为production</span><br><span class="line">        new OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>注意：若想优化生效，必须将mode改为production模式</strong><br>详情见<a href="https://www.npmjs.com/package/mini-css-extract-plugin" target="_blank" rel="noopener">npm官网</a>  </p><p><strong>expose-loader 暴露全局loader，称为内联loader。到目前为止，有内联loader，普通normal loader，前置loader (pre loader)，后置loader （post loader）</strong>  </p><h2 id="在项目中引入jquery类似模块方式"><a href="#在项目中引入jquery类似模块方式" class="headerlink" title="在项目中引入jquery类似模块方式"></a>在项目中引入jquery类似模块方式</h2><p>webpack.config.js配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let webpack =require(&apos;webpack&apos;);</span><br><span class="line">plugins:[//存放webpack插件</span><br><span class="line">    new webpack.ProvidePlugin(&#123;//在每个模块中注入$</span><br><span class="line">        &apos;$&apos;:&apos;jquery&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="webpack引入基层模块方式"><a href="#webpack引入基层模块方式" class="headerlink" title="webpack引入基层模块方式"></a>webpack引入基层模块方式</h2><ol><li>expose-loader暴露到全局window上</li><li>providePlugin给每个模块提供$</li><li>cdn方式引入不打包，webpack需要配置externals</li></ol><h2 id="打包文件分类"><a href="#打包文件分类" class="headerlink" title="打包文件分类"></a>打包文件分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename:&apos;css/main.css&apos;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>将css打包在css文件夹中  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:/(.png|.jpg)$/,</span><br><span class="line">    use:&#123;</span><br><span class="line">        loader:&apos;url-loader&apos;,</span><br><span class="line">        options:&#123;</span><br><span class="line">            limit:50*1024,</span><br><span class="line">            outputPath:&apos;images/&apos;,</span><br><span class="line">            //publicPath:&apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片打包路径前配置publicPath即可。</p><h2 id="生成source-map便于调试，几种不同选项"><a href="#生成source-map便于调试，几种不同选项" class="headerlink" title="生成source-map便于调试，几种不同选项"></a>生成source-map便于调试，几种不同选项</h2><p>(1)增加源码映射文件，便于调试。标示报错文件行和列，大而全文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool:&apos;source-map&apos;</span><br></pre></td></tr></table></figure></p><p>(2)不会产生单独文件，但是可以显示行和列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool:&apos;eval-source-map&apos;</span><br></pre></td></tr></table></figure></p><p>(3)不会产生列，但是是一个单独的映射文件，用于调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool:&apos;cheap-module-source-map&apos;</span><br></pre></td></tr></table></figure></p><p>(4)不会产生文件，集成在打包后的文件中，也不会产生列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool:&apos;cheap-module-eval-source-map&apos;</span><br></pre></td></tr></table></figure></p><h2 id="监听文件变动，实时打包"><a href="#监听文件变动，实时打包" class="headerlink" title="监听文件变动，实时打包"></a>监听文件变动，实时打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:true,</span><br><span class="line">watchOptions:&#123;//监听选项</span><br><span class="line">    poll:1000,//每秒问我1000次，是否打包</span><br><span class="line">    aggregateTimeout:500,//防抖</span><br><span class="line">    ignored:/node_modules///不需要监控的文件</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="webpack插件应用"><a href="#webpack插件应用" class="headerlink" title="webpack插件应用"></a>webpack插件应用</h2><ol><li><p>cleanWebpackPlugin(需要安装依赖模块)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new CleanWebpackPlugin(&apos;./dist&apos;)//先清空dist目录下的文件在打包</span><br></pre></td></tr></table></figure></li><li><p>copyWebpackPlugin(需要安装依赖模块)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">        from:&apos;./doc&apos;,</span><br><span class="line">        to:&apos;./dist&apos;</span><br><span class="line">    &#125;//可以写多个，拷贝多个目录文件</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li><p>bannerPlugin(内置插件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//添加版权注释信息</span><br><span class="line">new Webpack.BannerPlugin(&apos;make by mgl 2019-2-1&apos;)</span><br></pre></td></tr></table></figure></li></ol><p>运行打包命令后，可在打包文件中看到注释信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="webpack中devServer几种配置"><a href="#webpack中devServer几种配置" class="headerlink" title="webpack中devServer几种配置"></a>webpack中devServer几种配置</h2><p>(1)单纯配置跨域代理方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy:&#123;</span><br><span class="line">     &apos;/api&apos;:&#123;</span><br><span class="line">         target:&apos;http://localhost:3000&apos;,</span><br><span class="line">         pathRewrite:&#123;&apos;/api&apos;:&apos;&apos;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)前端单纯mock数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before(app)&#123;</span><br><span class="line">    app.get(&apos;/user&apos;,(req,res)=&gt;&#123;</span><br><span class="line">        res.json(&#123;name:&apos;mgl-before&apos;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)有服务端，不用代理来处理，在服务端中启动webpack，用服务端端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//express</span><br><span class="line"></span><br><span class="line">let express = require(&apos;express&apos;);</span><br><span class="line">let webpack=require(&apos;webpack&apos;);</span><br><span class="line">//引入中间件</span><br><span class="line">let middle=require(&apos;webpack-dev-middleware&apos;);</span><br><span class="line"></span><br><span class="line">let config=require(&apos;./webpack.config.js&apos;);</span><br><span class="line"></span><br><span class="line">let compiler=webpack(config);//webpack处理返回结果</span><br><span class="line"></span><br><span class="line">let app=express();</span><br><span class="line">app.use(middle(compiler));</span><br><span class="line"></span><br><span class="line">app.get(&apos;/user&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    res.json(&#123;name:&apos;mgl&apos;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure></p><h2 id="resolve属性配置"><a href="#resolve属性配置" class="headerlink" title="resolve属性配置"></a>resolve属性配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve:&#123;//解析第三方模块</span><br><span class="line">    modules:[path.resolve(&apos;node_modules&apos;)],</span><br><span class="line">    extensions:[&apos;.js&apos;,&apos;.css&apos;,&apos;.vue&apos;,&apos;.json&apos;]//指定解析后缀名称，从左向右</span><br><span class="line">    // mainFields:[&apos;style&apos;,&apos;main&apos;]//指定引入模块的先后顺序</span><br><span class="line">    // mainFiles:[],//指定入口文件的名字，默认是index.js</span><br><span class="line">    // alias:&#123;//配置别名</span><br><span class="line">    //     bootstrap:&apos;bootstrap/dist/css/bootstrap.css&apos;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>陆续更新中，欢迎关注！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着假期闲暇，练习下webpack4.0的一些配置。    &lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
